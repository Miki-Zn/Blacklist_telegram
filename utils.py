# utils.py

import asyncio
import logging
import json
import os
import re
import base64
import uuid
import random
from datetime import datetime, timedelta
from pathlib import Path
from functools import wraps
from typing import Union

import aiohttp
import cv2
from PIL import Image
from pyrogram import Client, errors
from pyrogram.types import InputMediaPhoto
from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import BaseFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import OPENAI_API_KEY

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ config.py ---
try:
    from config import (
        BOT_TOKEN, ADMIN_IDS, AZURE_API_KEY, AZURE_REGION,
        REPORTING_CHANNEL_ID, STORAGE_CHANNEL_ID,
        OPENAI_API_KEY, OPENAI_MODEL, CLAUDE_API_KEY, GEMINI_API_KEY,
        DEWATERMARK_API_KEY, REPLICATE_API_TOKEN
    )
except ImportError:
    print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ config.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ.")
    exit()

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
DEFAULT_AI_PROMPT = (
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ä–∞–π—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
    "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω–µ—Ü –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ —Ç—ã –æ–±–Ω–∞—Ä—É–∂–∏—à—å —Ç–∞–º –ø–æ–¥–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞, –ø—Ä–∏–∑—ã–≤ –∫ –ø–æ–¥–ø–∏—Å–∫–µ, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¢–æ–ø–æ—Ä Live. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å', '–ò—Å—Ç–æ—á–Ω–∏–∫: XYZ', '–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π —É –Ω–∞—Å –≤ –∫–∞–Ω–∞–ª–µ'), –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏ —ç—Ç—É —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥–æ–º. "
    "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ '–í–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:'. "
    "–¶–µ–ª—å ‚Äî –≤—ã–¥–∞—Ç—å —á–∏—Å—Ç—ã–π, –≥–æ—Ç–æ–≤—ã–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ—Ä–∞–π—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
)
ALBUM_COLLECTION_DELAY = 2.5
MAX_RETRY_ATTEMPTS = 3
POLLING_INTERVAL_MINUTES = 5

INSTAGRAM_IMAGE_SIZE = (1080, 1350)
TWITTER_IMAGE_SIZE = (1200, 675)
INSTAGRAM_CHAR_LIMIT = 2200
THREADS_CHAR_LIMIT = 500
TWITTER_CHAR_LIMIT = 280
DEWATERMARK_API_URL = "https://platform.dewatermark.ai/api/object_removal/v1/erase_watermark"


# --- –î–ò–†–ï–ö–¢–û–†–ò–ò ---
SCRIPT_DIR = Path(__file__).resolve().parent
TASKS_DIR, WATERMARKS_DIR, SESSIONS_DIR, MAILINGS_MEDIA_DIR, STATE_DIR, SOCIAL_POSTS_DIR, TEMP_DIR = (
    SCRIPT_DIR / "tasks", SCRIPT_DIR / "watermarks", SCRIPT_DIR / "sessions",
    SCRIPT_DIR / "mailings_media", SCRIPT_DIR / "task_states", SCRIPT_DIR / "social_posts",
    SCRIPT_DIR / "temp_files"
)
for p in [TASKS_DIR, WATERMARKS_DIR, SESSIONS_DIR, MAILINGS_MEDIA_DIR, STATE_DIR, SOCIAL_POSTS_DIR, TEMP_DIR]: p.mkdir(exist_ok=True)


# --- –û–ë–©–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
TASK_LOCKS = {}
ACTIVE_CLIENTS = {}
ACTIVE_TASKS = {}
TEMP_MEDIA_GROUPS = {}


# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò ---
async def set_task_error(task_name: str, reason: str, bot: Bot):
    task_lock = await get_task_lock(task_name)
    config_path = TASKS_DIR / f"{task_name}.json"
    async with task_lock:
        config = await read_json_file(config_path)
        if config:
            config['status'] = 'inactive'; config['last_error'] = reason
            await write_json_file(config_path, config)
    try:
        await bot.send_message(ADMIN_IDS[0], f"‚ùóÔ∏è–ó–∞–¥–∞—á–∞ <b>{task_name}</b> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_name}: {e}")

async def stop_worker(task_name: str, bot: Bot, reason: str = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."):
    if task_name in ACTIVE_TASKS:
        logging.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–¥–∞—á—É {task_name}...")
        task = ACTIVE_TASKS.pop(task_name)
        task.cancel()
        try:
            await asyncio.wait_for(task, timeout=5.0)
        except asyncio.CancelledError:
            logging.info(f"–ó–∞–¥–∞—á–∞ {task_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except asyncio.TimeoutError:
            logging.warning(f"–ó–∞–¥–∞—á–∞ {task_name} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_name}: {e}")
    await set_task_error(task_name, reason, bot)

async def check_channel_access(client: Client, task_config: dict, bot: Bot, admin_id: int):
    task_name = task_config['task_name']; task_type = task_config.get('task_type', 'forwarding'); has_errors = False
    if task_type == 'forwarding':
        source_channels = task_config.get('source_channels', [])
        logging.info(f"[{task_name}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {len(source_channels)} –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
        for channel_id in source_channels:
            try:
                chat = await client.get_chat(channel_id)
                logging.info(f"[{task_name}] ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É '{chat.title}' ({channel_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
                await asyncio.sleep(0.5)
            except errors.FloodWait as e:
                logging.warning(f"[{task_name}] FloodWait –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {channel_id}. –ü–∞—É–∑–∞ {e.x} —Å–µ–∫.")
                await asyncio.sleep(e.x)
            except Exception as e:
                await bot.send_message(admin_id, f"‚ùóÔ∏è<b>[{task_name}]</b> –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É <code>{channel_id}</code>.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {e.__class__.__name__} - {e}")
                has_errors = True
    if task_type in ['forwarding', 'generative']:
        try:
            target_channel_id = task_config['target_channel']
            chat = await client.get_chat(target_channel_id)
            logging.info(f"[{task_name}] ‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É '{chat.title}' ({target_channel_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        except Exception as e:
            await bot.send_message(admin_id, f"‚ùóÔ∏è<b>[{task_name}]</b> –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¶–ï–õ–ï–í–û–ú–£ –∫–∞–Ω–∞–ª—É <code>{task_config.get('target_channel')}</code>.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {e.__class__.__name__} - {e}")
            has_errors = True
    try:
        await client.send_message("me", f"[{task_name}] Self-test message.")
        logging.info(f"[{task_name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
    except Exception as e:
        logging.error(f"[{task_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        has_errors = True
    if has_errors:
        await bot.send_message(admin_id, f"<b>[{task_name}]</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞. –í–æ—Ä–∫–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

# --- –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ---
def http_retry(max_retries=MAX_RETRY_ATTEMPTS):
    def decorator(async_func):
        @wraps(async_func)
        async def wrapper(*args, **kwargs):
            for attempt in range(max_retries):
                try: return await async_func(*args, **kwargs)
                except aiohttp.ClientError as e:
                    if attempt == max_retries - 1: logging.error(f"HTTP-–∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}"); return None
                    delay = 2 ** attempt
                    logging.warning(f"–û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    await asyncio.sleep(delay)
        return wrapper
    return decorator

async def read_json_file(file_path, lock=None):
    def _read():
        if not os.path.exists(file_path): return None
        try:
            with open(file_path, 'r', encoding='utf-8') as f: return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError): return None
    if lock:
        async with lock: return await asyncio.to_thread(_read)
    return await asyncio.to_thread(_read)

async def write_json_file(file_path, data, lock=None):
    def _write():
        with open(file_path, 'w', encoding='utf-8') as f: json.dump(data, f, indent=2, ensure_ascii=False)
    if lock:
        async with lock: await asyncio.to_thread(_write)
    else: await asyncio.to_thread(_write)

async def remove_file_async(path):
    if path and os.path.exists(path):
        try: await asyncio.to_thread(os.remove, path)
        except OSError as e: logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {path}: {e}")

async def get_task_lock(task_name):
    if task_name not in TASK_LOCKS: TASK_LOCKS[task_name] = asyncio.Lock()
    return TASK_LOCKS[task_name]

async def read_task_state(task_name: str) -> dict:
    state_file = STATE_DIR / f"{task_name}_state.json"
    state = await read_json_file(state_file)
    return state if isinstance(state, dict) else {}

async def write_task_state(task_name: str, state_data: dict):
    state_file = STATE_DIR / f"{task_name}_state.json"
    await write_json_file(state_file, state_data)

async def safe_answer_callback(callback: CallbackQuery, text: str = None, show_alert: bool = False):
    try: await callback.answer(text, show_alert=show_alert)
    except TelegramBadRequest: pass

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìã –§–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥", callback_data="manage_tasks")],
        [InlineKeyboardButton(text="‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", callback_data="manage_gen_tasks")],
        [InlineKeyboardButton(text="‚úçÔ∏è –í–µ–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤", callback_data="manage_channel_tasks")],
        [InlineKeyboardButton(text="üì£ –†–µ–∫–ª–∞–º–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="manage_adv_tasks")],
        [InlineKeyboardButton(text="üì® –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="global_mailing_add")],
        [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="view_activity")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
    
def confirm_album_keyboard(media_group_id: str, callback_prefix: str): return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–ª—å–±–æ–º", callback_data=f"{callback_prefix}:yes:{media_group_id}")], [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"{callback_prefix}:no:{media_group_id}")]])

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–¢–ï–ù–¢–ê ---
@http_retry()
async def azure_translate(text, target_lang):
    if not AZURE_API_KEY or not AZURE_REGION or not text: return text or ""
    endpoint, path, params = "https://api.cognitive.microsofttranslator.com", '/translate', {'api-version': '3.0', 'to': target_lang}
    headers = {'Ocp-Apim-Subscription-Key': AZURE_API_KEY, 'Ocp-Apim-Subscription-Region': AZURE_REGION, 'Content-type': 'application/json'}
    body = [{'text': text}]
    async with aiohttp.ClientSession() as session:
        async with session.post(endpoint + path, params=params, headers=headers, json=body) as resp:
            if resp.status == 200:
                try:
                    return (await resp.json())[0]['translations'][0]['text']
                except (IndexError, KeyError):
                    logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Azure: {await resp.text()}")
                    return None
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ Azure: {resp.status} - {await resp.text()}"); return None

async def _rewrite_with_openai(text: str, config: dict):
    api_key, model, system_prompt = OPENAI_API_KEY, config.get("model", OPENAI_MODEL), config.get("prompt", DEFAULT_AI_PROMPT)
    if not api_key or api_key.startswith("sk-xxxx"): return None
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    payload = {"model": model, "messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": text}], "temperature": 0.7}
    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload, timeout=120) as resp:
            if resp.status == 200: return (await resp.json())['choices'][0]['message']['content']
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI API: {resp.status} - {await resp.text()}"); return None

async def _rewrite_with_claude(text: str, config: dict):
    api_key, model, system_prompt = CLAUDE_API_KEY, config.get("model", "claude-3-haiku-20240307"), config.get("prompt", DEFAULT_AI_PROMPT)
    if not api_key: return None
    headers = {"x-api-key": api_key, "anthropic-version": "2023-06-01", "content-type": "application/json"}
    payload = {"model": model, "system": system_prompt, "messages": [{"role": "user", "content": text}], "max_tokens": 4096, "temperature": 0.7}
    async with aiohttp.ClientSession() as session:
        async with session.post("https://api.anthropic.com/v1/messages", headers=headers, json=payload, timeout=120) as resp:
            if resp.status == 200: return (await resp.json())['content'][0]['text']
            logging.error(f"–û—à–∏–±–∫–∞ Claude API: {resp.status} - {await resp.text()}"); return None

async def _rewrite_with_gemini(text: str, config: dict):
    api_key, model, system_prompt = GEMINI_API_KEY, config.get("model", "gemini-1.5-flash"), config.get("prompt", DEFAULT_AI_PROMPT)
    if not api_key: return None
    url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={api_key}"
    payload = {"systemInstruction": {"role": "model", "parts": [{"text": system_prompt}]}, "contents": [{"role": "user", "parts": [{"text": text}]}]}
    headers = {'Content-Type': 'application/json'}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload, timeout=120) as resp:
            if resp.status == 200:
                try: return (await resp.json())['candidates'][0]['content']['parts'][0]['text']
                except (KeyError, IndexError): logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Gemini: {await resp.text()}"); return None
            logging.error(f"–û—à–∏–±–∫–∞ Gemini API: {resp.status} - {await resp.text()}"); return None

async def _rewrite_with_local(text: str, config: dict):
    endpoint, model, system_prompt = config.get("endpoint"), config.get("model", "llama3"), config.get("prompt", DEFAULT_AI_PROMPT)
    if not endpoint: return None
    payload = {"model": model, "system": system_prompt, "prompt": text, "stream": False}; headers = {'Content-Type': 'application/json'}
    async with aiohttp.ClientSession() as session:
        async with session.post(endpoint, headers=headers, json=payload, timeout=180) as resp:
            if resp.status == 200:
                try: return (await resp.json())['response']
                except (KeyError, IndexError): logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Local AI: {await resp.text()}"); return None
            logging.error(f"–û—à–∏–±–∫–∞ Local AI: {resp.status} - {await resp.text()}"); return None

@http_retry()
async def rewrite_text_ai(text: str, ai_config: dict | None):
    if not ai_config or not ai_config.get("enabled"): return None
    provider_map = {"openai": _rewrite_with_openai, "claude": _rewrite_with_claude, "gemini": _rewrite_with_gemini, "local": _rewrite_with_local}
    provider = ai_config.get("provider", "openai")
    if provider in provider_map: return await provider_map[provider](text, ai_config)
    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}"); return None

async def generate_ai_text(provider: str, prompt: str, system_prompt: str) -> str | None:
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –∫ '{provider}'...")
    ai_config = {"prompt": system_prompt, "enabled": True}
    try:
        if provider == 'openai': return await _rewrite_with_openai(prompt, ai_config)
        elif provider == 'gemini': return await _rewrite_with_gemini(prompt, ai_config)
        elif provider == 'claude': return await _rewrite_with_claude(prompt, ai_config)
    except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ {provider}: {e}")
    return None

async def generate_ai_image(provider: str, prompt: str, task_name: str) -> str | None:
    logging.info(f"[{task_name}] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ '{provider}'...")
    if provider == 'dalle3':
        if not OPENAI_API_KEY: logging.error(f"[{task_name}] OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω."); return None
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"}
        payload = {"model": "dall-e-3", "prompt": prompt, "n": 1, "size": "1024x1024", "quality": "hd"}
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post("https://api.openai.com/v1/images/generations", headers=headers, json=payload, timeout=180) as resp:
                    if resp.status == 200:
                        image_url = (await resp.json())['data'][0]['url']
                        async with session.get(image_url) as img_resp:
                            if img_resp.status == 200:
                                output_path = TEMP_DIR / f"gen_{uuid.uuid4().hex}.png"
                                with open(output_path, "wb") as f: f.write(await img_resp.read())
                                logging.info(f"[{task_name}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ DALL-E 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}"); return str(output_path)
                    else: logging.error(f"[{task_name}] –û—à–∏–±–∫–∞ API DALL-E 3: {resp.status} - {await resp.text()}")
            except Exception as e: logging.error(f"[{task_name}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DALL-E 3: {e}", exc_info=True)
        return None
    elif provider == 'replicate':
        if not REPLICATE_API_TOKEN: logging.error(f"[{task_name}] REPLICATE_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω."); return None
        headers = {'Authorization': f'Token {REPLICATE_API_TOKEN}', 'Content-Type': 'application/json'}
        payload = {"version": "d2c52303a2861e6955743b01487f7a8b3c3e800a501a4e215033c5e8841456a1", "input": {"prompt": prompt}}
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post("https://api.replicate.com/v1/predictions", headers=headers, json=payload) as resp:
                    if resp.status not in [200, 201]: logging.error(f"[{task_name}] –û—à–∏–±–∫–∞ Replicate: {resp.status} - {await resp.text()}"); return None
                    get_url = (await resp.json())["urls"]["get"]
                for _ in range(60):
                    await asyncio.sleep(2)
                    async with session.get(get_url, headers=headers) as get_resp:
                        result = await get_resp.json()
                        if result['status'] == 'succeeded':
                            async with session.get(result['output'][0]) as img_resp:
                                output_path = TEMP_DIR / f"gen_{uuid.uuid4().hex}.png"
                                with open(output_path, "wb") as f: f.write(await img_resp.read())
                                logging.info(f"[{task_name}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Replicate —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}"); return str(output_path)
                        elif result['status'] in ['failed', 'canceled']: logging.error(f"[{task_name}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Replicate –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.get('error')}"); return None
            except Exception as e: logging.error(f"[{task_name}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Replicate: {e}", exc_info=True)
        return None
    logging.warning(f"[{task_name}] –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π '{provider}' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω."); return None

async def remove_external_watermark_async(image_path: str, task_name: str, config: dict) -> str | None:
    if not DEWATERMARK_API_KEY: logging.warning(f"[{task_name}] DEWATERMARK_API_KEY –Ω–µ –∑–∞–¥–∞–Ω."); return None
    logging.info(f"[{task_name}] –£–¥–∞–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞ —Å {os.path.basename(image_path)} –≤ —Ä–µ–∂–∏–º–µ {config['mode']}")
    headers = {"X-API-KEY": DEWATERMARK_API_KEY}; form_data = aiohttp.FormData()
    form_data.add_field('remove_text', 'true' if config['mode'] == 'PHOTOS' else 'false')
    try:
        with open(image_path, 'rb') as image_file:
            form_data.add_field('original_preview_image', image_file, filename=os.path.basename(image_path), content_type='image/jpeg')
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=120)) as session:
                async with session.post(DEWATERMARK_API_URL, headers=headers, data=form_data) as response:
                    if response.status == 200:
                        response_data = await response.json()
                        if "edited_image" in response_data and "image" in response_data["edited_image"]:
                            image_data = base64.b64decode(response_data["edited_image"]["image"])
                            output_path = TEMP_DIR / f"cleaned_{uuid.uuid4().hex}.png"
                            await asyncio.to_thread(lambda p, d: open(p, 'wb').write(d), output_path, image_data)
                            logging.info(f"[{task_name}] –í–Ω–µ—à–Ω–∏–π –≤–æ—Ç–µ—Ä–º–∞—Ä–∫ —É–¥–∞–ª–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_path}"); return str(output_path)
                    logging.error(f"[{task_name}] –û—à–∏–±–∫–∞ API dewatermark: {response.status} - {await response.text()}"); return None
    except Exception as e: logging.error(f"[{task_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞: {e}"); return None

async def resize_image(image_path: str, target_size: tuple[int, int], platform: str) -> str | None:
    def _process():
        try:
            image = Image.open(image_path).convert("RGB")
            image.thumbnail(target_size, Image.Resampling.LANCZOS)
            output_path = TEMP_DIR / f"temp_{platform}_{os.path.basename(image_path)}.jpg"
            image.save(output_path, "JPEG", quality=95); return str(output_path)
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è {platform}: {e}"); return None
    return await asyncio.to_thread(_process)

async def generate_video_thumbnail(video_path: str) -> str | None:
    def _process():
        try:
            cam = cv2.VideoCapture(video_path); ret, frame = cam.read(); cam.release()
            if not ret: logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ: {video_path}"); return None
            thumbnail_path = f"{os.path.splitext(video_path)[0]}_thumbnail.jpg"; cv2.imwrite(thumbnail_path, frame); return thumbnail_path
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ: {e}", exc_info=True); return None
    return await asyncio.to_thread(_process)

async def apply_watermark_async(image_path, watermark_path):
    if not image_path or not watermark_path or not os.path.exists(watermark_path): return None
    def _process():
        try:
            base_image = Image.open(image_path).convert("RGBA"); watermark = Image.open(watermark_path).convert("RGBA")
            if watermark.mode == 'RGBA': r, g, b, a = watermark.split(); a = a.point(lambda i: i * 0.25); watermark.putalpha(a)
            width, height = base_image.size; wm_width = int(width * 0.25); w_percent = (wm_width / float(watermark.size[0])); w_size = int((float(watermark.size[1]) * float(w_percent)))
            watermark = watermark.resize((wm_width, w_size), Image.Resampling.LANCZOS)
            position = (width - wm_width - 10, height - w_size - 10)
            transparent = Image.new('RGBA', base_image.size, (0,0,0,0)); transparent.paste(base_image, (0,0)); transparent.paste(watermark, position, mask=watermark)
            output_path = TEMP_DIR / f"temp_watermarked_{uuid.uuid4().hex}.jpg"; transparent.convert("RGB").save(output_path, "JPEG"); return str(output_path)
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {e}"); return None
    return await asyncio.to_thread(_process)

async def set_social_status(task_name: str, platform: str, status: str):
    task_lock = await get_task_lock(task_name)
    async with task_lock:
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        if config and platform in config: config[platform]['last_status'] = status; await write_json_file(TASKS_DIR / f"{task_name}.json", config)

async def save_social_post_id(task_name, platform, post_id, text, media_count):
    lock = await get_task_lock(f"{task_name}_social"); file_path = SOCIAL_POSTS_DIR / f"{task_name}.json"
    posts = await read_json_file(file_path, lock) or []
    posts.append({"platform": platform, "post_id": str(post_id), "text": text, "media_count": media_count, "timestamp": datetime.now().isoformat(), "stats": {"likes": 0, "comments": 0, "views": 0}})
    await write_json_file(file_path, posts, lock)

def get_text_for_platform(full_text, _, char_limit, hashtag_count):
    hashtags = re.findall(r'#\w+', full_text)
    text_without_hashtags = re.sub(r'#\w+', '', full_text).strip()
    selected_hashtags = " ".join(hashtags[:hashtag_count])
    available_len = char_limit - (len(selected_hashtags) + 2)
    if len(text_without_hashtags) > available_len: text_without_hashtags = text_without_hashtags[:available_len-3] + "..."
    final_text = text_without_hashtags
    if selected_hashtags: final_text += f"\n\n{selected_hashtags}"
    return final_text.strip()

async def post_to_instagram(task_name: str, config: dict, text: str, media_paths: list[str]):
    try: from instagrapi import Client as InstagramClient; from instagrapi.exceptions import LoginRequired, BadPassword
    except ImportError: logging.warning(f"[{task_name}] instagrapi –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."); return
    insta_config = config.get("instagram", {})
    if not insta_config.get("enabled") or not media_paths: return
    temp_files_to_clean = []
    def _post():
        cl = InstagramClient(); cl.delay_range = [2, 5]
        session_file = SESSIONS_DIR / f"{task_name}_instagram.json"
        if session_file.exists(): cl.load_settings(session_file)
        cl.login(insta_config["username"], insta_config["password"]); cl.dump_settings(session_file)
        insta_text = get_text_for_platform(text, "instagram", INSTAGRAM_CHAR_LIMIT, 30)
        post_result, temp_files_created_in_sync = None, []
        if len(media_paths) == 1:
            media_path = media_paths[0]
            if media_path.lower().endswith(('.mp4', '.mov')):
                thumbnail_path = asyncio.run(generate_video_thumbnail(media_path))
                if thumbnail_path: temp_files_created_in_sync.append(thumbnail_path)
                post_result = cl.clip_upload(path=media_path, caption=insta_text, thumbnail=thumbnail_path)
            else:
                resized_path = asyncio.run(resize_image(media_path, INSTAGRAM_IMAGE_SIZE, "instagram"))
                if resized_path: temp_files_created_in_sync.append(resized_path)
                post_result = cl.photo_upload(path=resized_path or media_path, caption=insta_text)
        else:
            photo_paths = [p for p in media_paths if not p.lower().endswith(('.mp4', '.mov'))]
            processed_photos = []
            for path in photo_paths:
                resized_path = asyncio.run(resize_image(path, INSTAGRAM_IMAGE_SIZE, "instagram"))
                processed_photos.append(resized_path or path)
                if resized_path: temp_files_created_in_sync.append(resized_path)
            if processed_photos: post_result = cl.album_upload(paths=processed_photos, caption=insta_text)
        return (post_result.pk if post_result else None, temp_files_created_in_sync)
    try:
        post_id, temp_files_to_clean = await asyncio.to_thread(_post)
        if post_id:
            await save_social_post_id(task_name, "instagram", post_id, text, len(media_paths))
            logging.info(f"[{task_name}] –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Instagram. Post ID: {post_id}")
    except Exception as e: await set_social_status(task_name, "instagram", f"–û—à–∏–±–∫–∞: {e}")
    finally: await asyncio.gather(*[remove_file_async(p) for p in temp_files_to_clean])

async def post_to_x(task_name: str, config: dict, text: str, media_paths: list[str]):
    try: import tweepy
    except ImportError: logging.warning(f"[{task_name}] tweepy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."); return
    x_config = config.get("twitter", {})
    if not x_config.get("enabled"): return
    temp_files_to_clean = []
    def _post():
        auth_v1 = tweepy.OAuth1UserHandler(x_config["consumer_key"], x_config["consumer_secret"], x_config["access_token"], x_config["access_token_secret"])
        api_v1 = tweepy.API(auth_v1)
        client_v2 = tweepy.Client(consumer_key=x_config["consumer_key"], consumer_secret=x_config["consumer_secret"], access_token=x_config["access_token"], access_token_secret=x_config["access_token_secret"])
        tweet_text = get_text_for_platform(text, "twitter", TWITTER_CHAR_LIMIT, 3); media_ids, temp_files_created_in_sync = [], []
        for path in media_paths[:4]:
            if not path.lower().endswith(('.mp4', '.mov')):
                resized_path = asyncio.run(resize_image(path, TWITTER_IMAGE_SIZE, "twitter"))
                if resized_path:
                    temp_files_created_in_sync.append(resized_path)
                    media = api_v1.media_upload(filename=resized_path)
                    media_ids.append(media.media_id_string)
        response = client_v2.create_tweet(text=tweet_text, media_ids=media_ids if media_ids else None)
        return (response.data['id'] if response.data else None, temp_files_created_in_sync)
    try:
        tweet_id, temp_files_to_clean = await asyncio.to_thread(_post)
        if tweet_id:
            await save_social_post_id(task_name, "twitter", tweet_id, text, len(media_paths))
            logging.info(f"[{task_name}] –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ X. Tweet ID: {tweet_id}")
    except Exception as e: await set_social_status(task_name, "twitter", f"–û—à–∏–±–∫–∞: {e}")
    finally: await asyncio.gather(*[remove_file_async(p) for p in temp_files_to_clean])

async def process_text_logic(original_text, task_config, client):
    if not original_text: return ""
    task_name = task_config.get('task_name', 'UnknownTask'); processed_text = original_text
    replace_rules = task_config.get('replace_links')
    if replace_rules:
        for item in replace_rules:
            if 'source' in item and 'target' in item:
                source_domain = re.sub(r'^https?://', '', item['source']).strip('/')
                target_link = item['target'].rstrip('/')
                pattern = re.compile(rf'(https?://)?{re.escape(source_domain)}(/\S*)?')
                processed_text = pattern.sub(rf'{target_link}\2', processed_text)
    translation_config = task_config.get('translation', {})
    if translation_config.get('enabled') and translation_config.get('target_lang'):
        translated = await azure_translate(processed_text, translation_config['target_lang'])
        if translated: processed_text = translated
    ai_conf = task_config.get("ai_config", {})
    if ai_conf.get("enabled"):
        rewritten_text = await rewrite_text_ai(processed_text, ai_conf)
        if rewritten_text is not None: processed_text = rewritten_text
    allowed_prefixes = set()
    replace_links_list = task_config.get('replace_links') or []
    for item in replace_links_list:
       if 'target' in item: allowed_prefixes.add(item['target'].rstrip('/')) 
    append_link = task_config.get('append_link')
    if append_link: allowed_prefixes.add(append_link)
    referral_links_list = task_config.get('referral_links') or []
    allowed_prefixes.update(referral_links_list)
    def link_cleaner(match):
        url = match.group(0)
        if any(url.startswith(prefix) for prefix in allowed_prefixes): return url
        return ""
    link_pattern = r'https?://\S+|t\.me/\S+|@\w+'
    processed_text = re.sub(link_pattern, link_cleaner, processed_text)
    text_to_append = []
    if append_link: text_to_append.append(append_link)
    if referral_links_list:
        try:
            history = await client.get_chat_history(task_config['target_channel'], limit=1)
            if history: link_index = history[0].id % len(referral_links_list); text_to_append.append(referral_links_list[link_index])
        except Exception as e: logging.error(f"[{task_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
    hashtags_list = task_config.get('hashtags') or []
    if hashtags_list: text_to_append.append(" ".join(hashtags_list))
    if text_to_append: processed_text = processed_text.strip() + "\n\n" + "\n\n".join(text_to_append)
    return processed_text.strip()

class AdminFilter(BaseFilter):
    async def __call__(self, message: Union[Message, CallbackQuery]) -> bool:
        return message.from_user.id in ADMIN_IDS

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def send_with_retry(client: Client, media_type: str, chat_id: int, text: str, media, task_name: str = "Unknown"):
    for attempt in range(MAX_RETRY_ATTEMPTS):
        try:
            if media_type == 'album' and media:
                await client.send_media_group(chat_id, media=media)
            elif media_type == 'photo' and media:
                await client.send_photo(chat_id, photo=media, caption=text)
            elif media_type == 'video' and media:
                await client.send_video(chat_id, video=media, caption=text)
            else:
                await client.send_message(chat_id, text)
            return True # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        except errors.FloodWait as e:
            logging.warning(f"[{task_name}] FloodWait –≤ —á–∞—Ç–µ {chat_id}. –ü–∞—É–∑–∞ {e.x + 2} —Å–µ–∫.")
            await asyncio.sleep(e.x + 2)
        except (errors.UserNotParticipant, errors.ChatAdminRequired) as e:
            logging.error(f"[{task_name}] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {chat_id}: {e}. –í–µ—Ä–æ—è—Ç–Ω–æ, –±–∞–Ω.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            return False # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        except Exception as e:
            logging.error(f"[{task_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}", exc_info=True)
            if attempt < MAX_RETRY_ATTEMPTS - 1:
                await asyncio.sleep(5) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                logging.error(f"[{task_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id} –ø–æ—Å–ª–µ {MAX_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
                return False # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    return False # –Ø–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
