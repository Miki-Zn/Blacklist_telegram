# advertising_tasks.py

import asyncio
import logging
import random
import os
import uuid
import re
from datetime import datetime, timedelta, time, timezone
from typing import Union

# Aiogram –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∏–º–ø–æ—Ä—Ç—ã
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.bot import Bot

# Pyrogram –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
from pyrogram import Client, filters
from pyrogram.enums import ChatType
from pyrogram.errors import RPCError, FloodWait
from pyrogram.types import InputMediaPhoto, Message as PyrogramMessage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ utils.py ---
from utils import (
    TASKS_DIR, SESSIONS_DIR, WATERMARKS_DIR, TEMP_DIR, ADMIN_IDS, ACTIVE_CLIENTS,
    STORAGE_CHANNEL_ID, ALBUM_COLLECTION_DELAY,
    write_json_file, read_json_file, get_task_lock, remove_file_async,
    apply_watermark_async, confirm_album_keyboard, AdminFilter, TEMP_MEDIA_GROUPS,
    stop_worker, main_menu_keyboard, send_with_retry, safe_answer_callback
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance: Union[Bot, None] = None

# --- FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
class AdvertisingTaskCreation(StatesGroup):
    name, api_id, api_hash, proxy, watermark, sends_per_hour, target_groups = [State() for _ in range(7)]
    get_message_variants = State()
    confirm_album = State()
    ask_for_more_variants = State()

class AdvertisingTaskEditing(StatesGroup):
    get_new_sends_per_hour = State()
    add_group_id = State()
    get_new_message_variants = State()
    confirm_new_album = State()
    ask_for_more_new_variants = State()
    get_funnel_message = State()

class AdvertisingTaskTesting(StatesGroup):
    get_test_group_id = State()

# --- –õ–æ–≥–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á ---
async def send_advert_job(task_name: str, config: dict, target_groups_override: list = None):
    mode = "–¢–ï–°–¢" if target_groups_override else "–†–ê–°–°–´–õ–ö–ê"
    logging.info(f"[{task_name}] –ù–∞—á–∏–Ω–∞—é —Ä–µ–∫–ª–∞–º–Ω—É—é {mode.lower()}.")

    client = ACTIVE_CLIENTS.get(task_name)
    is_temp_client = False
    if not client or not client.is_connected:
        logging.warning(f"[{task_name}] –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π.")
        client = Client(task_name, api_id=config['api_id'], api_hash=config['api_hash'], workdir=str(SESSIONS_DIR), proxy=config.get('proxy'))
        is_temp_client = True

    all_temp_files = []
    sent_count, failed_count = 0, 0

    try:
        if is_temp_client: await client.start()
        
        logging.info(f"[{task_name}] –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –∑–∞–¥–∞—á–∏...")
        async for _ in client.get_dialogs(): pass
        logging.info(f"[{task_name}] –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.")

        adv_config = config.get("advertising_config", {})
        variants = adv_config.get("message_variants", [])
        if not variants:
            logging.error(f"[{task_name}] –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            if not target_groups_override:
                await stop_worker(task_name, bot_instance, "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return 0, 0

        chosen_variant = random.choice(variants)
        text_to_send = chosen_variant.get("text", "")
        media_files = chosen_variant.get("media_files", [])
        media_type = chosen_variant.get("media_type", "none")
        watermark_file = config.get('watermark_file')

        media_to_send = []
        if media_type != "none":
            messages_from_storage = await client.get_messages(STORAGE_CHANNEL_ID, media_files)
            downloaded_paths = []
            for m in messages_from_storage:
                ext = ".jpg" if m.photo else ".mp4" if m.video else ""
                file_path = await m.download(in_memory=False, file_name=str(TEMP_DIR / f"adv_{uuid.uuid4().hex}{ext}"))
                downloaded_paths.append(file_path)
                all_temp_files.append(file_path)

            final_paths = downloaded_paths
            if watermark_file and os.path.exists(watermark_file) and media_type in ['photo', 'album']:
                watermarked_paths_tasks = [apply_watermark_async(path, watermark_file) for path in downloaded_paths]
                watermarked_paths = await asyncio.gather(*watermarked_paths_tasks)
                final_paths = [watermarked or original for original, watermarked in zip(downloaded_paths, watermarked_paths)]
                all_temp_files.extend(p for p in watermarked_paths if p)

            if media_type == 'album':
                media_to_send.extend(InputMediaPhoto(media=path, caption=text_to_send if i == 0 else "") for i, path in enumerate(final_paths))
            elif media_type in ['photo', 'video'] and final_paths:
                media_to_send = final_paths[0]
        
        target_group_ids = adv_config.get('target_group_ids', [])
        if target_groups_override is not None:
             groups_to_send = target_groups_override
        elif target_group_ids:
             groups_to_send = target_group_ids
        else:
             groups_to_send = [dialog.chat.id async for dialog in client.get_dialogs() if dialog.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]]

        logging.info(f"[{task_name}] –ù–∞–π–¥–µ–Ω–æ {len(groups_to_send)} –≥—Ä—É–ø–ø. –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É...")

        for i, group_id in enumerate(groups_to_send):
            success = await send_with_retry(
                client=client,
                media_type=media_type,
                chat_id=group_id,
                text=text_to_send,
                media=media_to_send,
                task_name=task_name
            )

            if success:
                sent_count += 1
                logging.info(f"[{task_name}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}.")
                if len(groups_to_send) > 1 and i < len(groups_to_send) - 1:
                    delay = random.randint(45, 120)
                    logging.info(f"[{task_name}] –ü–∞—É–∑–∞ –Ω–∞ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
            else:
                failed_count += 1
        
        if mode == "–†–ê–°–°–´–õ–ö–ê" and sent_count > 0:
            async with await get_task_lock(f"{task_name}_stats"):
                stats_file = TASKS_DIR / f"{task_name}_stats.json"
                stats_data = await read_json_file(stats_file) or {}
                today = str(datetime.now().date())
                stats_data.setdefault(today, {"sent_messages": 0})["sent_messages"] += sent_count
                await write_json_file(stats_file, stats_data)

        logging.info(f"[{task_name}] {mode} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent_count}, –û—à–∏–±–∫–∏: {failed_count}.")
        return sent_count, failed_count
    except Exception as e:
        logging.error(f"[{task_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `send_advert_job`: {e}", exc_info=True)
        return 0, 0
    finally:
        if is_temp_client and client and client.is_connected:
            await client.stop()
        await asyncio.gather(*[remove_file_async(p) for p in all_temp_files if p])

async def hourly_scheduler_job(task_name: str, config: dict, scheduler: AsyncIOScheduler):
    logging.info(f"[{task_name}] –ó–∞–ø—É—Å–∫ –µ–∂–µ—á–∞—Å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
    try:
        now = datetime.now(timezone.utc)
        
        for job in scheduler.get_jobs():
            if job.id.startswith(f"{task_name}_adv_") and job.next_run_time < now:
                job.remove()

        adv_config = config.get('advertising_config', {})
        sends_per_hour = adv_config.get('sends_per_hour', 1)
        if sends_per_hour > 0:
            interval_seconds = 3600 // sends_per_hour
            for i in range(sends_per_hour):
                delay_seconds = (i * interval_seconds) + random.randint(1, interval_seconds)
                run_date = now + timedelta(seconds=delay_seconds)
                scheduler.add_job(send_advert_job, 'date', run_date=run_date, args=[task_name, config, None], id=f"{task_name}_adv_{uuid.uuid4().hex}")

        logging.info(f"[{task_name}] –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {sends_per_hour} —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å.")
    except Exception as e:
        logging.error(f"[{task_name}] –û—à–∏–±–∫–∞ –≤ –µ–∂–µ—á–∞—Å–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–µ–∫–ª–∞–º—ã: {e}", exc_info=True)

async def daily_summary_report():
    logging.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∑–∞–¥–∞—á–∞–º...")
    report_lines = [f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º —Ä–∞—Å—Å—ã–ª–∫–∞–º –∑–∞ {datetime.now().strftime('%d.%m.%Y')}</b>\n"]
    
    active_ad_tasks = []
    for task_name, task_process in ACTIVE_TASKS.items():
        if task_process and not task_process.done():
            config = await read_json_file(TASKS_DIR / f"{task_name}.json")
            if config and config.get("task_type") == "advertising":
                active_ad_tasks.append(task_name)
    
    if not active_ad_tasks:
        logging.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        return

    total_sent_today = 0
    for task_name in active_ad_tasks:
        stats_file = TASKS_DIR / f"{task_name}_stats.json"
        stats_data = await read_json_file(stats_file)
        today_str = str(datetime.now().date())
        
        sent_today = 0
        if stats_data and today_str in stats_data:
            sent_today = stats_data[today_str].get("sent_messages", 0)
        
        report_lines.append(f"‚Ä¢ <b>{task_name}</b>: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_today} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        total_sent_today += sent_today
        
    report_lines.append(f"\nüìà <b>–í—Å–µ–≥–æ –∑–∞ —Å—É—Ç–∫–∏:</b> {total_sent_today} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    
    full_report = "\n".join(report_lines)
    
    try:
        await bot_instance.send_message(5718511608, full_report)
        logging.info("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: {e}", exc_info=True)

async def run_advertising_worker(task_name: str, config: dict, bot: Bot):
    pyrogram_client, worker_scheduler = None, AsyncIOScheduler(timezone="UTC")
    try:
        pyrogram_client = Client(task_name, api_id=config['api_id'], api_hash=config['api_hash'], workdir=str(SESSIONS_DIR), proxy=config.get('proxy'))

        @pyrogram_client.on_message(filters.private & ~filters.me)
        async def on_private_message(client: Client, pyro_message: PyrogramMessage):
            current_config = await read_json_file(TASKS_DIR / f"{task_name}.json")
            funnel_config = current_config.get("advertising_config", {}).get("funnel", {})

            if funnel_config.get("enabled") and funnel_config.get("message"):
                history = [h async for h in client.get_chat_history(pyro_message.from_user.id, limit=2)]
                if len(history) <= 1:
                    logging.info(f"[{task_name}] –ù–æ–≤–æ–µ –õ–° –æ—Ç {pyro_message.from_user.id}. –°—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–æ—Ä–æ–Ω–∫–∞.")
                    await client.send_message(pyro_message.from_user.id, funnel_config["message"])
                    return

            target_user_id = 5718511608
            logging.info(f"[{task_name}] –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {pyro_message.from_user.id}. –£–≤–µ–¥–æ–º–ª—è—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            notification_text = (
                f"‚ùóÔ∏è –ù–∞ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∑–∞–¥–∞—á–∏ <b>{task_name}</b> –ø—Ä–∏—à–ª–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                f"–û—Ç: {pyro_message.from_user.first_name} (@{pyro_message.from_user.username or 'N/A'})\n"
                f"ID: <code>{pyro_message.from_user.id}</code>"
            )
            try:
                await bot.send_message(target_user_id, notification_text)
            except Exception as e:
                logging.error(f"[{task_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –õ–°: {e}")

        await pyrogram_client.start()
        ACTIVE_CLIENTS[task_name] = pyrogram_client
        
        worker_scheduler.add_job(hourly_scheduler_job, 'interval', hours=1, args=[task_name, config, worker_scheduler], id=f"{task_name}_hourly_scheduler", next_run_time=datetime.now())
        
        worker_scheduler.start()
        await bot.send_message(ADMIN_IDS[0], f"üì£ –†–µ–∫–ª–∞–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä <b>{task_name}</b> –∑–∞–ø—É—â–µ–Ω.")
        await asyncio.Event().wait()
    except asyncio.CancelledError:
        logging.info(f"–†–µ–∫–ª–∞–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä {task_name} –æ—Ç–º–µ–Ω–µ–Ω.")
    except Exception as e:
        logging.error(f"[{task_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–º –≤–æ—Ä–∫–µ—Ä–µ: {e}", exc_info=True)
        await stop_worker(task_name, bot, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if worker_scheduler.running: worker_scheduler.shutdown()
        if pyrogram_client and pyrogram_client.is_connected: await pyrogram_client.stop()
        if task_name in ACTIVE_CLIENTS: ACTIVE_CLIENTS.pop(task_name)
        logging.info(f"–†–µ–∫–ª–∞–º–Ω—ã–π –≤–æ—Ä–∫–µ—Ä {task_name} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

async def cb_manage_funnel(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    funnel_config = config.get("advertising_config", {}).get("funnel", {})
    
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if funnel_config.get("enabled") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
    message_text = funnel_config.get("message", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    
    text = (
        f"<b>üîÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è '{task_name}'</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        f"<b>–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:</b>\n<pre>{message_text}</pre>"
    )
    
    buttons = [
        [InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å / –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"adv_funnel_toggle:{task_name}")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"adv_funnel_set_msg:{task_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]
    ]
    
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await safe_answer_callback(callback)

async def cb_toggle_funnel(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        funnel_config = config.setdefault("advertising_config", {}).setdefault("funnel", {})
        funnel_config["enabled"] = not funnel_config.get("enabled", False)
        await write_json_file(TASKS_DIR / f"{task_name}.json", config)
    
    await cb_manage_funnel(callback, state)

async def cb_set_funnel_message(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await state.set_state(AdvertisingTaskEditing.get_funnel_message)
    await state.update_data(task_name=task_name)
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await safe_answer_callback(callback)

async def process_funnel_message(message: Message, state: FSMContext):
    data = await state.get_data()
    task_name = data['task_name']
    
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        funnel_config = config.setdefault("advertising_config", {}).setdefault("funnel", {})
        funnel_config["message"] = message.text
        await write_json_file(TASKS_DIR / f"{task_name}.json", config)
        
    await state.clear()
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    
    fake_callback = CallbackQuery(id=str(uuid.uuid4()), from_user=message.from_user, chat_instance="fake", message=message, data=f"adv_funnel_manage:{task_name}")
    await cb_manage_funnel(fake_callback, state)

async def cb_manage_adv_tasks(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    buttons = []
    task_files = [f for f in TASKS_DIR.glob("*.json") if not f.name.endswith("_stats.json")]
    for task_file in sorted(task_files):
        try:
            config = await read_json_file(task_file)
            if config and config.get("task_type") == "advertising":
                buttons.append([InlineKeyboardButton(text=f"üì£ {task_file.stem}", callback_data=f"task_view:{task_file.stem}")])
        except Exception: continue
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∑–∞–¥–∞—á—É", callback_data="adv_task_add")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await safe_answer_callback(callback)

async def cb_adv_task_add(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdvertisingTaskCreation.name)
    await callback.message.edit_text("<b>–®–∞–≥ 1/7: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∑–∞–¥–∞—á–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–º—è —Å–µ—Å—Å–∏–∏, —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤).")
    await safe_answer_callback(callback)

async def process_adv_task_name(message: Message, state: FSMContext):
    task_name = message.text.strip()
    if not re.match(r'^[a-zA-Z0-9_]+$', task_name):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.")
        return
    if (TASKS_DIR / f"{task_name}.json").exists():
        await message.answer("–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    if not (SESSIONS_DIR / f"{task_name}.session").exists():
        await message.answer(f"<b>–û—à–∏–±–∫–∞:</b> —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ `sessions/{task_name}.session` –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.")
        return
    await state.update_data(name=task_name, message_variants=[])
    await state.set_state(AdvertisingTaskCreation.api_id)
    await message.answer("<b>–®–∞–≥ 2/7:</b> –í–≤–µ–¥–∏—Ç–µ `api_id` –≤–∞—à–µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞.")

async def process_adv_task_api_id(message: Message, state: FSMContext):
    try:
        await state.update_data(api_id=int(message.text))
        await state.set_state(AdvertisingTaskCreation.api_hash)
        await message.answer("<b>–®–∞–≥ 3/7:</b> –í–≤–µ–¥–∏—Ç–µ `api_hash`.")
    except ValueError:
        await message.answer("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def process_adv_task_api_hash(message: Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    await state.set_state(AdvertisingTaskCreation.proxy)
    await message.answer("<b>–®–∞–≥ 4/7:</b> –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `scheme://user:pass@host:port` –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-`, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω—É–∂–µ–Ω.")

async def process_adv_task_proxy(message: Message, state: FSMContext):
    proxy_str = message.text.strip()
    proxy_dict = None
    if proxy_str != '-':
        try:
            scheme, rest = proxy_str.split('://', 1)
            creds, host_port = rest.split('@', 1)
            user, password = creds.split(':', 1)
            host, port = host_port.split(':', 1)
            proxy_dict = {"scheme": scheme, "hostname": host, "port": int(port), "username": user, "password": password}
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `scheme://user:pass@host:port` –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-`.")
            return
    await state.update_data(proxy=proxy_dict)
    await state.set_state(AdvertisingTaskCreation.watermark)
    await message.answer("<b>–®–∞–≥ 5/7:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª `.png` –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `-`, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω.")

async def process_adv_task_watermark(message: Message, state: FSMContext):
    if message.text and message.text.strip() == '-':
        await state.update_data(watermark_file=None)
    elif message.document and 'image/png' in message.document.mime_type:
        data = await state.get_data()
        task_name = data['name']
        file_path = WATERMARKS_DIR / f"{task_name}.png"
        await bot_instance.download(message.document, destination=file_path)
        await state.update_data(watermark_file=str(file_path))
    else:
        await message.answer("–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –∫–∞–∫ –î–û–ö–£–ú–ï–ù–¢ .png –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-` –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
        return
    await state.set_state(AdvertisingTaskCreation.sends_per_hour)
    await message.answer("<b>–®–∞–≥ 6/7:</b> –°–∫–æ–ª—å–∫–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–µ–ª–∞—Ç—å –≤ –ß–ê–°? (–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `2`)")

async def process_adv_task_sends_per_hour(message: Message, state: FSMContext):
    try:
        sends = int(message.text.strip())
        if not 1 <= sends <= 60: raise ValueError
        await state.update_data(sends_per_hour=sends)
        await state.set_state(AdvertisingTaskCreation.target_groups)
        await message.answer("<b>–®–∞–≥ 7/7:</b> –í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: `-100123, -100456`).\n\n–ß—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∞—Ç—å –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-`.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.")

async def process_adv_task_target_groups(message: Message, state: FSMContext):
    group_ids = []
    if message.text.strip() != '-':
        try:
            group_ids = [int(g.strip()) for g in message.text.split(',')]
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return
    await state.update_data(target_group_ids=group_ids)
    await state.set_state(AdvertisingTaskCreation.get_message_variants)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è <b>–ø–µ—Ä–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1/5)</b> —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞–ª—å–±–æ–º).")

async def complete_variant_collection(message_or_callback, state: FSMContext):
    data = await state.get_data()
    message = message_or_callback if isinstance(message_or_callback, Message) else message_or_callback.message
    
    current_fsm_state = await state.get_state()

    if current_fsm_state in [AdvertisingTaskCreation.ask_for_more_variants, AdvertisingTaskCreation.get_message_variants, AdvertisingTaskCreation.confirm_album]:
        await finalize_advertising_task_creation(message, state)
    else:
        task_name = data['task_name']
        async with await get_task_lock(task_name):
            config = await read_json_file(TASKS_DIR / f"{task_name}.json")
            if 'advertising_config' in config:
                config['advertising_config']['message_variants'] = data['message_variants']
                await write_json_file(TASKS_DIR / f"{task_name}.json", config)
        await state.clear()
        await message.answer(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è <b>{task_name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]]))

async def finalize_advertising_task_creation(message: Message, state: FSMContext):
    data = await state.get_data()
    adv_config = {
        "sends_per_hour": data['sends_per_hour'],
        "target_group_ids": data.get('target_group_ids', []),
        "message_variants": data['message_variants'],
        "funnel": {"enabled": False, "message": ""}
    }
    task_config = {
        "task_name": data['name'], "task_type": "advertising",
        "api_id": data['api_id'], "api_hash": data['api_hash'],
        "status": "inactive", "last_error": None,
        "proxy": data.get('proxy'), "watermark_file": data.get('watermark_file'),
        "advertising_config": adv_config
    }
    await write_json_file(TASKS_DIR / f"{data['name']}.json", task_config)
    await state.clear()
    await message.answer(f"‚úÖ –†–µ–∫–ª–∞–º–Ω–∞—è –∑–∞–¥–∞—á–∞ <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=main_menu_keyboard())

async def process_content_variant(message: Message, state: FSMContext):
    current_state_str = await state.get_state()
    confirm_album_state = AdvertisingTaskCreation.confirm_album if current_state_str == AdvertisingTaskCreation.get_message_variants else AdvertisingTaskEditing.confirm_new_album
    ask_more_state = AdvertisingTaskCreation.ask_for_more_variants if current_state_str == AdvertisingTaskCreation.get_message_variants else AdvertisingTaskEditing.ask_for_more_new_variants
    album_prefix = "adv_create_album" if current_state_str == AdvertisingTaskCreation.get_message_variants else "adv_edit_album"

    if message.media_group_id:
        await state.set_state(confirm_album_state)
        await handle_album_message(message, state, album_prefix)
        return

    try:
        data = await state.get_data()
        current_variants = data.get('message_variants', [])
        variant_data = {}

        if message.text:
            variant_data = {"text": message.text, "media_type": "none", "media_files": []}
        elif message.photo or message.video:
            forwarded = await bot_instance.copy_message(STORAGE_CHANNEL_ID, message.chat.id, message.message_id)
            variant_data = {"text": message.caption or "", "media_type": message.content_type, "media_files": [forwarded.message_id]}
        else:
            return

        current_variants.append(variant_data)
        await state.update_data(message_variants=current_variants)

        count = len(current_variants)
        if count < 5:
            await state.set_state(ask_more_state)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="adv_add_another_variant:yes")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data="adv_add_another_variant:no")]
            ])
            await message.answer(f"<b>–í–∞—Ä–∏–∞–Ω—Ç {count}/5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω.</b>\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π?", reply_markup=kb)
        else:
            await message.answer("<b>–í–∞—Ä–∏–∞–Ω—Ç 5/5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω.</b>\n\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç. –ó–∞–≤–µ—Ä—à–∞—é...")
            await complete_variant_collection(message, state)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_content_variant: {e}", exc_info=True)
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await state.clear()

async def process_album_confirmation(callback: CallbackQuery, state: FSMContext):
    current_state_str = await state.get_state()
    get_message_state = AdvertisingTaskCreation.get_message_variants if current_state_str == AdvertisingTaskCreation.confirm_album else AdvertisingTaskEditing.get_new_message_variants
    ask_more_state = AdvertisingTaskCreation.ask_for_more_variants if current_state_str == AdvertisingTaskCreation.confirm_album else AdvertisingTaskEditing.ask_for_more_new_variants

    _, action, media_group_id = callback.data.split(":")
    album_data = TEMP_MEDIA_GROUPS.pop(media_group_id, None)
    if not album_data:
        await safe_answer_callback(callback, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", show_alert=True)
        return

    if action == "no":
        await state.set_state(get_message_state)
        await callback.message.edit_text("–ê–ª—å–±–æ–º –æ—Ç–º–µ–Ω–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await safe_answer_callback(callback)
        return

    try:
        media_ids, text_content = [], next((msg.caption for msg in album_data['messages'] if msg.caption), "")
        for msg in album_data['messages']:
            forwarded = await bot_instance.copy_message(STORAGE_CHANNEL_ID, msg.chat.id, msg.message_id)
            media_ids.append(forwarded.message_id)
        variant_data = {"text": text_content, "media_type": "album", "media_files": media_ids}

        data = await state.get_data()
        current_variants = data.get('message_variants', [])
        current_variants.append(variant_data)
        await state.update_data(message_variants=current_variants)

        count = len(current_variants)
        if count < 5:
            await state.set_state(ask_more_state)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="adv_add_another_variant:yes")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data="adv_add_another_variant:no")]
            ])
            await callback.message.edit_text(f"<b>–í–∞—Ä–∏–∞–Ω—Ç {count}/5 (–∞–ª—å–±–æ–º) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.</b>\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π?", reply_markup=kb)
        else:
            await callback.message.edit_text("<b>–í–∞—Ä–∏–∞–Ω—Ç 5/5 (–∞–ª—å–±–æ–º) —Å–æ—Ö—Ä–∞–Ω–µ–Ω.</b>\n\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç. –ó–∞–≤–µ—Ä—à–∞—é...")
            await complete_variant_collection(callback, state)
    except Exception as e:
        await safe_answer_callback(callback, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞: {e}", show_alert=True)
        await state.set_state(get_message_state)
        await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
    finally:
        await safe_answer_callback(callback)

async def cb_adv_send_now(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await callback.message.edit_text(f"–ó–∞–ø—É—Å–∫–∞—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è <b>{task_name}</b>... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
    await safe_answer_callback(callback)
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    sent, failed = await send_advert_job(task_name, config)
    await callback.message.edit_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è <b>{task_name}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–∫–∏: {failed}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]]))

async def cb_adv_test_now(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await state.set_state(AdvertisingTaskTesting.get_test_group_id)
    await state.update_data(task_name=task_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã (—á–∏—Å–ª–æ, –º–æ–∂–Ω–æ —Å –º–∏–Ω—É—Å–æ–º).")
    await safe_answer_callback(callback)

async def process_adv_test_group_id(message: Message, state: FSMContext):
    try:
        group_id = int(message.text.strip())
        data = await state.get_data()
        task_name = data['task_name']
        await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É <code>{group_id}</code>...")
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        sent, failed = await send_advert_job(task_name, config, target_groups_override=[group_id])
        result_text = "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ." if sent > 0 else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        await message.answer(result_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]]))
    except (ValueError, Exception) as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()

async def cb_adv_show_account(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    client = ACTIVE_CLIENTS.get(task_name)
    is_temp_client = not (client and client.is_connected)
    if is_temp_client:
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        client = Client(task_name, api_id=config['api_id'], api_hash=config['api_hash'], workdir=str(SESSIONS_DIR), proxy=config.get('proxy'))
    try:
        if is_temp_client: await client.start()
        me = await client.get_me()
        full_name = f"{me.first_name or ''} {me.last_name or ''}".strip()
        await safe_answer_callback(callback, f"–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è {task_name}:\n–ò–º—è: {full_name}\nUsername: @{me.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}", show_alert=True)
    except Exception as e:
        await safe_answer_callback(callback, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}", show_alert=True)
    finally:
        if is_temp_client and client and client.is_connected: await client.stop()

async def cb_edit_adv_field(callback: CallbackQuery, state: FSMContext):
    _, task_name, field = callback.data.split(":")
    await state.update_data(task_name=task_name)
    if field == "sends_per_hour":
        await state.set_state(AdvertisingTaskEditing.get_new_sends_per_hour)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –ß–ê–° (1-60).")
    elif field == "target_groups":
        await cb_manage_target_groups(callback, state)
    elif field == "message_variants":
        await state.set_state(AdvertisingTaskEditing.get_new_message_variants)
        await state.update_data(message_variants=[])
        await callback.message.edit_text("<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è <b>–ø–µ—Ä–≤–æ–≥–æ (–Ω–æ–≤–æ–≥–æ)</b> –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1/5).")
    await safe_answer_callback(callback)

async def cb_manage_target_groups(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    if not config: return
    
    group_ids = config.get("advertising_config", {}).get("target_group_ids", [])
    
    client = ACTIVE_CLIENTS.get(task_name)
    is_temp_client = not (client and client.is_connected)
    if is_temp_client:
        client = Client(task_name, api_id=config['api_id'], api_hash=config['api_hash'], workdir=str(SESSIONS_DIR), proxy=config.get('proxy'))
    
    buttons = []
    text = f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –¥–ª—è '{task_name}':</b>\n"
    
    try:
        if is_temp_client: await client.start()
        if not group_ids:
            text += "\n–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç."
        else:
            text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
            for group_id in group_ids:
                try:
                    chat = await client.get_chat(group_id)
                    title = chat.title
                except Exception:
                    title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, ID –Ω–µ–≤–µ—Ä–Ω—ã–π)"
                buttons.append([InlineKeyboardButton(text=f"üóëÔ∏è {title} ({group_id})", callback_data=f"adv_delete_group:{task_name}:{group_id}")])
        
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ ID", callback_data=f"adv_add_group:{task_name}")])
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")])
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø: {e}\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]]))
    finally:
        if is_temp_client and client.is_connected:
            await client.stop()
        await safe_answer_callback(callback)

async def cb_add_group(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await state.set_state(AdvertisingTaskEditing.add_group_id)
    await state.update_data(task_name=task_name)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:")
    await safe_answer_callback(callback)

async def process_add_group_id(message: Message, state: FSMContext):
    try:
        group_id = int(message.text.strip())
        data = await state.get_data()
        task_name = data['task_name']
        
        async with await get_task_lock(task_name):
            config = await read_json_file(TASKS_DIR / f"{task_name}.json")
            if 'target_group_ids' not in config['advertising_config']:
                config['advertising_config']['target_group_ids'] = []
            
            if group_id not in config['advertising_config']['target_group_ids']:
                 config['advertising_config']['target_group_ids'].append(group_id)
                 await write_json_file(TASKS_DIR / f"{task_name}.json", config)
            
        await state.clear()
        
        fake_callback = CallbackQuery(id=str(uuid.uuid4()), from_user=message.from_user, chat_instance="fake", message=message, data=f"edit_adv_field:{task_name}:target_groups")
        await cb_manage_target_groups(fake_callback, state)

    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def cb_delete_group(callback: CallbackQuery, state: FSMContext):
    _, task_name, group_id_str = callback.data.split(":")
    group_id = int(group_id_str)
    
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        if group_id in config['advertising_config']['target_group_ids']:
            config['advertising_config']['target_group_ids'].remove(group_id)
            await write_json_file(TASKS_DIR / f"{task_name}.json", config)
    
    await cb_manage_target_groups(callback, state)


async def process_edit_adv_sends_per_hour(message: Message, state: FSMContext):
    data = await state.get_data()
    task_name = data['task_name']
    try:
        sends = int(message.text.strip())
        assert 1 <= sends <= 60
        async with await get_task_lock(task_name):
            config = await read_json_file(TASKS_DIR / f"{task_name}.json")
            config['advertising_config']['sends_per_hour'] = sends
            await write_json_file(TASKS_DIR / f"{task_name}.json", config)
        await state.clear()
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —á–∞—Å –¥–ª—è <b>{task_name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {sends}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]]))
    except (ValueError, AssertionError):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.")

def register_handlers(router: Router, bot: Bot):
    global bot_instance
    bot_instance = bot

    router.callback_query.register(cb_manage_adv_tasks, F.data == "manage_adv_tasks", AdminFilter())
    router.callback_query.register(cb_adv_task_add, F.data == "adv_task_add", AdminFilter())
    router.message.register(process_adv_task_name, AdvertisingTaskCreation.name, AdminFilter())
    router.message.register(process_adv_task_api_id, AdvertisingTaskCreation.api_id, AdminFilter())
    router.message.register(process_adv_task_api_hash, AdvertisingTaskCreation.api_hash, AdminFilter())
    router.message.register(process_adv_task_proxy, AdvertisingTaskCreation.proxy, AdminFilter())
    router.message.register(process_adv_task_watermark, F.document | (F.text == '-'), AdvertisingTaskCreation.watermark, AdminFilter())
    router.message.register(process_adv_task_sends_per_hour, AdvertisingTaskCreation.sends_per_hour, AdminFilter())
    router.message.register(process_adv_task_target_groups, AdvertisingTaskCreation.target_groups, AdminFilter())
    router.message.register(process_content_variant, AdvertisingTaskCreation.get_message_variants, F.content_type.in_({'text', 'photo', 'video'}), AdminFilter())
    router.callback_query.register(process_album_confirmation, AdvertisingTaskCreation.confirm_album, F.data.startswith("adv_create_album:"), AdminFilter())
    router.message.register(process_content_variant, AdvertisingTaskEditing.get_new_message_variants, F.content_type.in_({'text', 'photo', 'video'}), AdminFilter())
    router.callback_query.register(process_album_confirmation, AdvertisingTaskEditing.confirm_new_album, F.data.startswith("adv_edit_album:"), AdminFilter())
    
    @router.callback_query(F.data.startswith("adv_add_another_variant:"), AdminFilter())
    async def cb_ask_for_another_variant(callback: CallbackQuery, state: FSMContext):
        current_fsm_state_str = await state.get_state()
        
        get_content_state = None
        if current_fsm_state_str == AdvertisingTaskCreation.ask_for_more_variants:
            get_content_state = AdvertisingTaskCreation.get_message_variants
        elif current_fsm_state_str == AdvertisingTaskEditing.ask_for_more_new_variants:
            get_content_state = AdvertisingTaskEditing.get_new_message_variants

        if callback.data.split(":")[1] == 'yes' and get_content_state:
            await state.set_state(get_content_state)
            data = await state.get_data()
            count = len(data.get('message_variants', []))
            await callback.message.edit_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è <b>–≤–∞—Ä–∏–∞–Ω—Ç–∞ {count + 1}/5</b>.")
        else:
            await callback.message.edit_text("–ó–∞–≤–µ—Ä—à–∞—é...")
            await complete_variant_collection(callback, state)
        await safe_answer_callback(callback)

    router.callback_query.register(cb_edit_adv_field, F.data.startswith("edit_adv_field:"), AdminFilter())
    router.callback_query.register(cb_add_group, F.data.startswith("adv_add_group:"), AdminFilter())
    router.callback_query.register(cb_delete_group, F.data.startswith("adv_delete_group:"), AdminFilter())
    router.message.register(process_add_group_id, AdvertisingTaskEditing.add_group_id, AdminFilter())
    router.message.register(process_edit_adv_sends_per_hour, AdvertisingTaskEditing.get_new_sends_per_hour, AdminFilter())
    
    router.callback_query.register(cb_manage_funnel, F.data.startswith("adv_funnel_manage:"), AdminFilter())
    router.callback_query.register(cb_toggle_funnel, F.data.startswith("adv_funnel_toggle:"), AdminFilter())
    router.callback_query.register(cb_set_funnel_message, F.data.startswith("adv_funnel_set_msg:"), AdminFilter())
    router.message.register(process_funnel_message, AdvertisingTaskEditing.get_funnel_message, AdminFilter())
    
    router.callback_query.register(cb_adv_send_now, F.data.startswith("adv_send_now:"), AdminFilter())
    router.callback_query.register(cb_adv_test_now, F.data.startswith("adv_test_now:"), AdminFilter())
    router.message.register(process_adv_test_group_id, AdvertisingTaskTesting.get_test_group_id, AdminFilter())
    router.callback_query.register(cb_adv_show_account, F.data.startswith("adv_show_account:"), AdminFilter())