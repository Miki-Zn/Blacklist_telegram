# channel_management_tasks.py

import asyncio
import logging
import random
import os
import uuid
import re
from datetime import datetime, timedelta
from typing import Union, List

# Aiogram
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.bot import Bot
from aiogram.exceptions import TelegramBadRequest

# Pyrogram –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
from pyrogram import Client
from pyrogram.errors import RPCError, FloodWait, UserAlreadyParticipant
from pyrogram.types import InputMediaPhoto, InputMediaVideo
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –£—Ç–∏–ª–∏—Ç—ã
from utils import (
    TASKS_DIR, SESSIONS_DIR, WATERMARKS_DIR, TEMP_DIR, ADMIN_IDS, ACTIVE_CLIENTS,
    STORAGE_CHANNEL_ID, ALBUM_COLLECTION_DELAY,
    write_json_file, read_json_file, get_task_lock, remove_file_async,
    apply_watermark_async, confirm_album_keyboard, AdminFilter, TEMP_MEDIA_GROUPS,
    stop_worker, main_menu_keyboard, azure_translate, send_with_retry, safe_answer_callback,
    generate_ai_text, generate_ai_image
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance: Union[Bot, None] = None
cb_task_edit = None

# --- FSM (–ö–æ–Ω–µ—á–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã) ---
class ChannelTaskCreation(StatesGroup):
    name, api_id, api_hash, proxy, watermark = [State() for _ in range(5)]
    get_main_channel_id, get_main_channel_link, get_main_channel_lang = [State() for _ in range(3)]
    ask_for_another_channel, get_extra_channel_id, get_extra_channel_link, get_extra_channel_lang = [State() for _ in range(4)]

class ContentPoolManagement(StatesGroup):
    get_content_type = State()
    get_content_prompt = State()
    ask_for_image_type = State()
    get_custom_image = State()
    get_immediate_post_content = State()
    confirm_album = State()
    get_schedule_details_type = State()
    get_schedule_details_value = State()

class ChannelTaskEditing(StatesGroup):
    get_new_channel_id = State()
    get_new_channel_link = State()
    get_new_channel_lang = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def channel_task_edit_keyboard(task_name: str, config: dict):
    mng_config = config.get("management_config", {})
    trans_provider = mng_config.get("translation_provider", "azure")
    text_gen_provider = mng_config.get("text_generation_provider", "openai")
    trans_text = "Azure" if trans_provider == "azure" else f"AI ({trans_provider.title()})"
    buttons = [
        [InlineKeyboardButton(text="- –ö–∞–Ω–∞–ª—ã –∏ —è–∑—ã–∫–∏", callback_data=f"channel_edit_channels:{task_name}")],
        [InlineKeyboardButton(text=f"- –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞: {trans_text}", callback_data=f"channel_edit_translator_menu:{task_name}")],
        [InlineKeyboardButton(text=f"- AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {text_gen_provider.title()}", callback_data=f"channel_edit_text_gen_menu:{task_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def channel_content_pool_keyboard(task_name: str):
    buttons = [
        [InlineKeyboardButton(text="‚ûï –û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç", callback_data=f"channel_add_content_menu:{task_name}")],
        [InlineKeyboardButton(text="‚ú® –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç", callback_data=f"channel_add_generative:{task_name}")],
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"channel_post_now:{task_name}")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã", callback_data=f"channel_view_content:{task_name}")],
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ú–µ–Ω—è–µ–º callback_data –Ω–∞ "task_view", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∑–∞–¥–∞—á–∏
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ", callback_data=f"task_view:{task_name}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ ---
async def _execute_post_logic(task_name: str, client: Client, config: dict, post_content: dict):
    all_temp_files = []
    try:
        mng_config = config.get("management_config", {})
        original_text, media_ids, media_type = "", [], "none"

        if post_content['type'] == 'generative':
            logging.info(f"[{task_name}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            text_provider = mng_config.get("text_generation_provider", "openai")
            prompt = post_content.get("prompt", "")
            system_prompt = "–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π AI, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞."
            generated_text = await generate_ai_text(text_provider, prompt, system_prompt)
            if not generated_text: logging.error(f"[{task_name}] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç."); return False
            original_text = generated_text
            if post_content.get("image_source") == "generate":
                image_prompt = f"–°–æ–∑–¥–∞–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É: {prompt}"
                generated_image_path = await generate_ai_image('dalle3', image_prompt, task_name)
                if generated_image_path:
                    all_temp_files.append(generated_image_path); media_ids = [generated_image_path]; media_type = "photo"
            elif post_content.get("image_source") == "custom":
                media_ids = post_content.get("storage_message_ids", []); media_type = post_content.get("media_type", "none")
        else:
            original_text = post_content.get("text", ""); media_ids = post_content.get("storage_message_ids", []); media_type = post_content.get("media_type", "none")

        downloaded_paths = []
        if media_ids:
            if post_content.get("image_source") == "generate":
                downloaded_paths = media_ids
            else:
                try:
                    messages = await client.get_messages(STORAGE_CHANNEL_ID, media_ids)
                    for m in messages:
                        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ ---
                        ext = ".jpg" if m.photo else ".mp4" if m.video else ""
                        file_name = str(TEMP_DIR / f"mng_{uuid.uuid4().hex}{ext}")
                        file_path = await m.download(in_memory=False, file_name=file_name)
                        downloaded_paths.append(file_path); all_temp_files.append(file_path)
                except Exception as e:
                    logging.error(f"[{task_name}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (ID: {STORAGE_CHANNEL_ID}). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç '{client.me.username}' —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –û—à–∏–±–∫–∞: {e}")
                    return False

        final_media_paths = downloaded_paths
        watermark_file = config.get('watermark_file')
        if watermark_file and os.path.exists(watermark_file) and media_type in ['photo', 'album']:
            watermarked_tasks = [apply_watermark_async(p, watermark_file) for p in downloaded_paths]
            watermarked_results = await asyncio.gather(*watermarked_tasks)
            final_media_paths = [watermarked or original for original, watermarked in zip(downloaded_paths, watermarked_results)]
            all_temp_files.extend(p for p in watermarked_results if p)

        channels = mng_config.get("target_channels", []); base_lang = channels[0]['lang'] if channels else 'ru'
        trans_provider = mng_config.get("translation_provider", "azure")
        all_successful = True
        for channel in channels:
            target_id, target_lang = channel['id'], channel['lang']
            text_to_send = original_text
            if target_lang != base_lang and original_text:
                translated_text = None
                if trans_provider != 'azure':
                    ai_prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ '{target_lang}' –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –í—ã–¥–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥:\n\n{original_text}"
                    translated_text = await generate_ai_text(trans_provider, ai_prompt, "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.")
                else:
                    translated_text = await azure_translate(original_text, target_lang)
                text_to_send = translated_text or original_text
            
            logging.info(f"[{task_name}] –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª {target_id}...")
            
            success = False
            if media_type == 'album' and final_media_paths:
                media_group = [InputMediaPhoto(media=path, caption=text_to_send if i == 0 else "") for i, path in enumerate(final_media_paths)]
                success = await send_with_retry(client.send_media_group, target_id, media=media_group, task_name=task_name)
            elif media_type == 'photo' and final_media_paths:
                success = await send_with_retry(client.send_photo, target_id, photo=final_media_paths[0], caption=text_to_send, task_name=task_name)
            elif media_type == 'video' and final_media_paths:
                success = await send_with_retry(client.send_video, target_id, video=final_media_paths[0], caption=text_to_send, task_name=task_name)
            elif text_to_send:
                success = await send_with_retry(client.send_message, target_id, text_to_send, task_name=task_name)
            
            if success:
                logging.info(f"[{task_name}] –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {target_id}.")
            else:
                logging.error(f"[{task_name}] –ù–ï –£–î–ê–õ–û–°–¨ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ {target_id}.")
                all_successful = False
                
            await asyncio.sleep(random.randint(5, 10))
        return all_successful
    finally:
        await asyncio.gather(*[remove_file_async(p) for p in all_temp_files if p])

async def execute_channel_post_job(task_name: str, content_id: str):
    logging.info(f"[{task_name}] –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å ID: {content_id}")
    
    # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    if not config: 
        logging.error(f"[{task_name}] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")
        return

    content_pool = config.get("management_config", {}).get("content_pool", [])
    content_item = next((item for item in content_pool if item["content_id"] == content_id), None)
    
    if not content_item: 
        logging.error(f"[{task_name}] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —Å ID {content_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    client = Client(task_name, api_id=config['api_id'], api_hash=config['api_hash'], workdir=str(SESSIONS_DIR), proxy=config.get('proxy'))
    
    try:
        await client.start()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞
        success = await _execute_post_logic(task_name, client, config, content_item)
        
        # –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–Ω–æ–≤–∞ –±–ª–æ–∫–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        async with await get_task_lock(task_name):
            config_fresh = await read_json_file(TASKS_DIR / f"{task_name}.json")
            content_pool_fresh = config_fresh.get("management_config", {}).get("content_pool", [])
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–î–ï–°–¨ ---
            if success and content_item.get('schedule_type') == 'scheduled':
                # –ï—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–Ω –±—ã–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                logging.info(f"[{task_name}] –ü–æ—Å—Ç {content_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
                content_pool_fresh = [p for p in content_pool_fresh if p.get("content_id") != content_id]
            else:
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                item_to_update = next((p for p in content_pool_fresh if p.get("content_id") == content_id), None)
                if item_to_update and item_to_update.get('schedule_type') == 'recurring':
                    item_to_update['last_posted'] = datetime.now().isoformat()

            config_fresh["management_config"]["content_pool"] = content_pool_fresh
            await write_json_file(TASKS_DIR / f"{task_name}.json", config_fresh)

    except Exception as e:
        logging.error(f"[{task_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ `execute_channel_post_job`: {e}", exc_info=True)
    finally:
        if client.is_connected: 
            await client.stop()

# --- –í–æ—Ä–∫–µ—Ä –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
async def run_channel_management_worker(task_name: str, config: dict, bot: Bot):
    worker_scheduler = AsyncIOScheduler(timezone="UTC")
    try:
        content_pool = config.get("management_config", {}).get("content_pool", [])
        for item in content_pool:
            content_id = item['content_id']
            schedule_type = item.get('schedule_type')
            if schedule_type == 'scheduled' and item.get('status', 'pending') == 'pending':
                try:
                    run_date = datetime.fromisoformat(item['run_date'])
                    now_utc = datetime.now(run_date.tzinfo)
                    if run_date > now_utc:
                        worker_scheduler.add_job(execute_channel_post_job, 'date', run_date=run_date, args=[task_name, content_id], id=content_id)
                    else: item['status'] = 'error_date_passed'
                except (ValueError, TypeError): item['status'] = 'error_invalid_date'
            elif schedule_type == 'recurring':
                interval = item['interval_hours']
                worker_scheduler.add_job(execute_channel_post_job, 'interval', hours=interval, args=[task_name, content_id], id=content_id)
        async with await get_task_lock(task_name):
            await write_json_file(TASKS_DIR / f"{task_name}.json", config)
        worker_scheduler.start()
        await bot.send_message(ADMIN_IDS[0], f"‚úÖ –í–æ—Ä–∫–µ—Ä –≤–µ–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ <b>{task_name}</b> –∑–∞–ø—É—â–µ–Ω.")
        await asyncio.Event().wait()
    except asyncio.CancelledError:
        logging.info(f"–í–æ—Ä–∫–µ—Ä {task_name} –æ—Ç–º–µ–Ω–µ–Ω.")
    except Exception as e:
        await stop_worker(task_name, bot, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if worker_scheduler.running: worker_scheduler.shutdown()
        
# --- FSM –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –°–æ–∑–¥–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ ---
async def cb_manage_channel_tasks(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    buttons = []
    task_files = [f for f in TASKS_DIR.glob("*.json") if not f.name.endswith("_stats.json")]
    for task_file in sorted(task_files):
        try:
            config = await read_json_file(task_file)
            if config and config.get("task_type") == "channel_management":
                buttons.append([InlineKeyboardButton(text=f"‚úçÔ∏è {task_file.stem}", callback_data=f"task_view:{task_file.stem}")])
        except Exception: continue
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–í–µ–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞)", callback_data="channel_task_add")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ '–í–µ–¥–µ–Ω–∏–µ –ö–∞–Ω–∞–ª–∞':", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await safe_answer_callback(callback)

async def cb_channel_task_add(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChannelTaskCreation.name)
    await callback.message.edit_text("<b>–®–∞–≥ 1/5: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–µ–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–º—è —Å–µ—Å—Å–∏–∏, —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞).")
    await safe_answer_callback(callback)

async def process_channel_task_name(message: Message, state: FSMContext):
    task_name = message.text.strip()
    if not re.match(r'^[a-zA-Z0-9_]+$', task_name) or (TASKS_DIR / f"{task_name}.json").exists():
        await message.answer("–û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."); return
    if not (SESSIONS_DIR / f"{task_name}.session").exists():
        await message.answer(f"<b>–û—à–∏–±–∫–∞:</b> —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ `sessions/{task_name}.session` –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    await state.update_data(name=task_name)
    await state.set_state(ChannelTaskCreation.api_id)
    await message.answer("<b>–®–∞–≥ 2/5:</b> –í–≤–µ–¥–∏—Ç–µ `api_id`.")

async def process_channel_task_api_id(message: Message, state: FSMContext):
    try: await state.update_data(api_id=int(message.text)); await state.set_state(ChannelTaskCreation.api_hash); await message.answer("<b>–®–∞–≥ 3/5:</b> –í–≤–µ–¥–∏—Ç–µ `api_hash`.")
    except ValueError: await message.answer("API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def process_channel_task_api_hash(message: Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip()); await state.set_state(ChannelTaskCreation.proxy); await message.answer("<b>–®–∞–≥ 4/5:</b> –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ (`scheme://user:pass@host:port`) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-`.")

async def process_channel_task_proxy(message: Message, state: FSMContext):
    proxy_str, proxy_dict = message.text.strip(), None
    if proxy_str != '-':
        try: scheme, rest = proxy_str.split('://', 1); creds, host_port = rest.split('@', 1); user, password = creds.split(':', 1); host, port = host_port.split(':', 1); proxy_dict = {"scheme": scheme, "hostname": host, "port": int(port), "username": user, "password": password}
        except Exception: await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏."); return
    await state.update_data(proxy=proxy_dict); await state.set_state(ChannelTaskCreation.watermark); await message.answer("<b>–®–∞–≥ 5/5:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª `.png` –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-`.")

async def process_channel_task_watermark(message: Message, state: FSMContext):
    if message.text and message.text.strip() == '-': await state.update_data(watermark_file=None)
    elif message.document and 'image/png' in message.document.mime_type:
        data = await state.get_data(); file_path = WATERMARKS_DIR / f"{data['name']}.png"
        await bot_instance.download(message.document, destination=file_path); await state.update_data(watermark_file=str(file_path))
    else: await message.answer("–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .png –∫–∞–∫ –î–û–ö–£–ú–ï–ù–¢ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `-`."); return
    await state.update_data(target_channels=[])
    await state.set_state(ChannelTaskCreation.get_main_channel_id)
    await message.answer("<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (1/3):</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `-100123...`).")

async def process_channel_id(message: Message, state: FSMContext, is_main: bool):
    try: channel_id = int(message.text.strip()); await state.update_data(current_channel_id=channel_id); next_state = ChannelTaskCreation.get_main_channel_link if is_main else ChannelTaskCreation.get_extra_channel_link; await state.set_state(next_state); await message.answer("<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ (2/3):</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `@channel` –∏–ª–∏ `t.me/channel`).")
    except ValueError: await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def process_channel_link(message: Message, state: FSMContext, is_main: bool):
    await state.update_data(current_channel_link=message.text.strip()); next_state = ChannelTaskCreation.get_main_channel_lang if is_main else ChannelTaskCreation.get_extra_channel_lang; await state.set_state(next_state); await message.answer("<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ (3/3):</b>\n\n–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –∫–∞–Ω–∞–ª–∞ (–¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, `ru`, `en`).")

async def process_channel_lang(message: Message, state: FSMContext, is_main: bool):
    lang = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', lang): await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥."); return
    data = await state.get_data(); current_channels = data.get('target_channels', [])
    current_channels.append({"id": data['current_channel_id'], "link": data['current_channel_link'], "lang": lang})
    await state.update_data(target_channels=current_channels)
    if is_main:
        await state.set_state(ChannelTaskCreation.ask_for_another_channel)
        await message.answer("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω.\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_extra_channel:yes"), InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="add_extra_channel:no")]]))
    else: await finalize_channel_task_creation(message, state)

async def cb_ask_for_another_channel(callback: CallbackQuery, state: FSMContext):
    if callback.data.split(":")[1] == 'yes': await state.set_state(ChannelTaskCreation.get_extra_channel_id); await callback.message.edit_text("<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø. –∫–∞–Ω–∞–ª–∞ (1/3):</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞.")
    else: await finalize_channel_task_creation(callback.message, state)
    await safe_answer_callback(callback)

async def finalize_channel_task_creation(message: Message, state: FSMContext):
    await message.answer("–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–¥–∞—á—É...")
    data = await state.get_data()
    management_config = {"target_channels": data['target_channels'], "content_pool": [], "translation_provider": "azure", "text_generation_provider": "openai"}
    task_config = {
        "task_name": data['name'], "task_type": "channel_management",
        "api_id": data['api_id'], "api_hash": data['api_hash'], "status": "inactive", "last_error": None,
        "proxy": data.get('proxy'), "watermark_file": data.get('watermark_file'),
        "management_config": management_config
    }
    await write_json_file(TASKS_DIR / f"{data['name']}.json", task_config)
    await state.clear()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤–µ–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=main_menu_keyboard())

# --- FSM –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
async def cb_edit_translator_menu(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Azure (–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)", callback_data=f"channel_set_translator:{task_name}:azure")],
        [InlineKeyboardButton(text="AI: OpenAI", callback_data=f"channel_set_translator:{task_name}:openai")],
        [InlineKeyboardButton(text="AI: Gemini", callback_data=f"channel_set_translator:{task_name}:gemini")],
        [InlineKeyboardButton(text="AI: Claude", callback_data=f"channel_set_translator:{task_name}:claude")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"task_edit:{task_name}")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=kb)
    await safe_answer_callback(callback)

async def cb_set_translator(callback: CallbackQuery, state: FSMContext):
    _, task_name, provider = callback.data.split(":")
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        config["management_config"]["translation_provider"] = provider
        await write_json_file(TASKS_DIR / f"{task_name}.json", config)
    fake_callback = callback_query_from_message(callback.message, f"task_edit:{task_name}")
    await cb_task_edit(fake_callback, state)
    await safe_answer_callback(callback, f"–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {provider.title()}")

async def cb_edit_text_gen_menu(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="OpenAI", callback_data=f"channel_set_text_gen:{task_name}:openai")],
        [InlineKeyboardButton(text="Gemini", callback_data=f"channel_set_text_gen:{task_name}:gemini")],
        [InlineKeyboardButton(text="Claude", callback_data=f"channel_set_text_gen:{task_name}:claude")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"task_edit:{task_name}")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤:", reply_markup=kb)
    await safe_answer_callback(callback)

async def cb_set_text_gen(callback: CallbackQuery, state: FSMContext):
    _, task_name, provider = callback.data.split(":")
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        config["management_config"]["text_generation_provider"] = provider
        await write_json_file(TASKS_DIR / f"{task_name}.json", config)
    fake_callback = callback_query_from_message(callback.message, f"task_edit:{task_name}")
    await cb_task_edit(fake_callback, state)
    await safe_answer_callback(callback, f"AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {provider.title()}")

async def cb_edit_channels_menu(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    channels = config.get("management_config", {}).get("target_channels", [])
    buttons = []
    text = f"<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è '{task_name}':</b>\n\n"
    for i, ch in enumerate(channels):
        text += f"{i+1}. –ö–∞–Ω–∞–ª ID: <code>{ch['id']}</code> (—è–∑—ã–∫: {ch['lang']})\n"
        buttons.append([InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {i+1}", callback_data=f"channel_delete_channel:{task_name}:{i}")])
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data=f"channel_add_new_channel:{task_name}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"task_edit:{task_name}")])
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await safe_answer_callback(callback)

async def cb_delete_channel(callback: CallbackQuery, state: FSMContext):
    _, task_name, index_str = callback.data.split(":")
    index = int(index_str)
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        channels = config["management_config"]["target_channels"]
        if 0 <= index < len(channels):
            if len(channels) == 1:
                await safe_answer_callback(callback, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–∞–ª!", show_alert=True); return
            deleted_channel = channels.pop(index)
            await write_json_file(TASKS_DIR / f"{task_name}.json", config)
            await safe_answer_callback(callback, f"–ö–∞–Ω–∞–ª {deleted_channel['id']} —É–¥–∞–ª–µ–Ω.")
        else:
            await safe_answer_callback(callback, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–∞–ª–∞.", show_alert=True); return
    await cb_edit_channels_menu(callback, state)

async def cb_add_new_channel(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await state.set_state(ChannelTaskEditing.get_new_channel_id)
    await state.update_data(task_name=task_name)
    await callback.message.edit_text("<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (1/3):</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    await safe_answer_callback(callback)

async def process_new_channel_id(message: Message, state: FSMContext):
    try:
        channel_id = int(message.text.strip())
        await state.update_data(new_channel_id=channel_id)
        await state.set_state(ChannelTaskEditing.get_new_channel_link)
        await message.answer("<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (2/3):</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É.")
    except ValueError: await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def process_new_channel_link(message: Message, state: FSMContext):
    await state.update_data(new_channel_link=message.text.strip())
    await state.set_state(ChannelTaskEditing.get_new_channel_lang)
    await message.answer("<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (3/3):</b>\n\n–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `en`).")

async def process_new_channel_lang(message: Message, state: FSMContext):
    lang = message.text.strip().lower()
    if not re.match(r'^[a-z]{2,3}$', lang): await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–∞."); return
    data = await state.get_data(); task_name = data['task_name']
    new_channel = {"id": data['new_channel_id'], "link": data['new_channel_link'], "lang": lang}
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        config["management_config"]["target_channels"].append(new_channel)
        await write_json_file(TASKS_DIR / f"{task_name}.json", config)
    await state.clear()
    await message.answer("‚úÖ –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!")
    fake_callback_query = callback_query_from_message(message, f"channel_edit_channels:{task_name}")
    await cb_edit_channels_menu(fake_callback_query, state)

# --- FSM –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ---
async def cb_manage_content_pool(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await callback.message.edit_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –∑–∞–¥–∞—á–∏ <b>{task_name}</b>:", reply_markup=channel_content_pool_keyboard(task_name))
    await safe_answer_callback(callback)

async def cb_add_content_menu(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóìÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", callback_data=f"channel_add_content:{task_name}:scheduled")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è", callback_data=f"channel_add_content:{task_name}:recurring")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"channel_manage_content:{task_name}")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ã—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:", reply_markup=kb)
    await safe_answer_callback(callback)
    
async def cb_add_content(callback: CallbackQuery, state: FSMContext):
    _, task_name, schedule_type = callback.data.split(":")
    await state.set_state(ContentPoolManagement.get_content_type)
    await state.update_data(task_name=task_name, content_type="regular", schedule_type=schedule_type)
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞–ª—å–±–æ–º).")
    await safe_answer_callback(callback)

async def process_content_for_pool(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get('content_type') == 'generative':
        await process_generative_custom_image(message, state); return
    if message.media_group_id: await state.set_state(ContentPoolManagement.confirm_album); await handle_album_message(message, state, "pool_confirm_album"); return
    try:
        content_data = {"text": "", "media_type": "none", "storage_message_ids": []}
        if message.text: content_data.update({"text": message.text})
        elif message.photo or message.video:
            forwarded = await bot_instance.copy_message(STORAGE_CHANNEL_ID, message.chat.id, message.message_id)
            content_data.update({"text": message.caption or "", "media_type": message.content_type, "storage_message_ids": [forwarded.message_id]})
        await state.update_data(content_to_add=content_data)
        await state.set_state(ContentPoolManagement.get_schedule_details_value)
        prompt = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`." if data['schedule_type'] == 'scheduled' else "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `24`)."
        await message.answer(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n{prompt}")
    except Exception as e: await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"); await state.clear()

async def cb_confirm_pool_album(callback: CallbackQuery, state: FSMContext):
    _, action, media_group_id = callback.data.split(":"); album_data = TEMP_MEDIA_GROUPS.pop(media_group_id, None)
    if not album_data: await safe_answer_callback(callback, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", show_alert=True); return
    if action == "no": await state.set_state(ContentPoolManagement.get_content_type); await callback.message.edit_text("–ê–ª—å–±–æ–º –æ—Ç–º–µ–Ω–µ–Ω."); return
    try:
        media_ids, text = [], next((msg.caption for msg in album_data['messages'] if msg.caption), "")
        for msg in album_data['messages']: forwarded = await bot_instance.copy_message(STORAGE_CHANNEL_ID, msg.chat.id, msg.message_id); media_ids.append(forwarded.message_id)
        content_data = {"text": text, "media_type": "album", "storage_message_ids": media_ids}
        data = await state.get_data()
        await state.update_data(content_to_add=content_data)
        await state.set_state(ContentPoolManagement.get_schedule_details_value)
        prompt = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`." if data['schedule_type'] == 'scheduled' else "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö."
        await callback.message.edit_text(f"–ê–ª—å–±–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n{prompt}")
    except Exception as e: await safe_answer_callback(callback, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", show_alert=True); await state.set_state(ContentPoolManagement.get_content_type); await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
    await safe_answer_callback(callback)

async def process_schedule_details(message: Message, state: FSMContext):
    data = await state.get_data()
    task_name, content_type, schedule_type, details = data['task_name'], data['content_type'], data['schedule_type'], message.text.strip()
    content_item = data.get('content_to_add', {})
    if content_type == 'generative':
        content_item['prompt'] = data.get('prompt')
        content_item['image_source'] = data.get('image_source')
    content_item.update({"content_id": str(uuid.uuid4()), "type": content_type, "schedule_type": schedule_type})
    try:
        if schedule_type == 'scheduled': content_item["run_date"] = datetime.strptime(details, "%Y-%m-%d %H:%M").isoformat(); content_item["status"] = "pending"
        else: content_item["interval_hours"] = int(details); content_item["last_posted"] = None
    except ValueError: await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."); return
    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        config["management_config"]["content_pool"].append(content_item)
        await write_json_file(TASKS_DIR / f"{task_name}.json", config)
    await state.clear()
    await message.answer("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!", reply_markup=channel_content_pool_keyboard(task_name))

async def cb_add_generative_post(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await state.set_state(ContentPoolManagement.get_content_prompt)
    await state.update_data(task_name=task_name, content_type="generative")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞:")
    await safe_answer_callback(callback)

async def process_generative_prompt(message: Message, state: FSMContext):
    await state.update_data(prompt=message.text)
    await state.set_state(ContentPoolManagement.ask_for_image_type)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é", callback_data="gen_image_type:custom")],
        [InlineKeyboardButton(text="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI", callback_data="gen_image_type:generate")],
        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="gen_image_type:none")]
    ])
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=kb)

async def cb_handle_image_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split(":")[1]
    await state.update_data(image_source=choice)
    if choice == "custom":
        await state.set_state(ContentPoolManagement.get_custom_image)
        await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∞–ª—å–±–æ–º.")
    else:
        await state.set_state(ContentPoolManagement.get_schedule_details_type)
        text = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ." if choice == "generate" else "–ü–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        await callback.message.edit_text(f"{text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_schedule_type_keyboard())
    await safe_answer_callback(callback)
    
async def process_generative_custom_image(message: Message, state: FSMContext):
    if message.media_group_id: await state.set_state(ContentPoolManagement.confirm_album); await handle_album_message(message, state, "pool_confirm_album"); return
    try:
        content_data = {"text": "", "media_type": "none", "storage_message_ids": []}
        if message.photo or message.video:
            forwarded = await bot_instance.copy_message(STORAGE_CHANNEL_ID, message.chat.id, message.message_id)
            content_data.update({"text": message.caption or "", "media_type": message.content_type, "storage_message_ids": [forwarded.message_id]})
        await state.update_data(content_to_add=content_data)
        await state.set_state(ContentPoolManagement.get_schedule_details_type)
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=get_schedule_type_keyboard())
    except Exception as e: await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"); await state.clear()

def get_schedule_type_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóìÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="gen_schedule_type:scheduled")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä—è—Ç—å", callback_data="gen_schedule_type:recurring")]
    ])

async def cb_get_schedule_type(callback: CallbackQuery, state: FSMContext):
    schedule_type = callback.data.split(":")[1]
    await state.update_data(schedule_type=schedule_type)
    await state.set_state(ContentPoolManagement.get_schedule_details_value)
    prompt = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`." if schedule_type == 'scheduled' else "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `24`)."
    await callback.message.edit_text(prompt)
    await safe_answer_callback(callback)

async def cb_post_now(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    await state.set_state(ContentPoolManagement.get_immediate_post_content)
    await state.update_data(task_name=task_name)
    await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
    await safe_answer_callback(callback)

async def process_immediate_post_content(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    data = await state.get_data(); task_name = data['task_name']
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    if not config: await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏."); await state.clear(); return
    content_data = {"type": "immediate", "text": "", "media_type": "none", "storage_message_ids": []}
    if message.text: content_data.update({"text": message.text})
    elif message.photo or message.video:
        forwarded = await bot_instance.copy_message(STORAGE_CHANNEL_ID, message.chat.id, message.message_id)
        content_data.update({"text": message.caption or "", "media_type": message.content_type, "storage_message_ids": [forwarded.message_id]})
    client = Client(task_name, api_id=config['api_id'], api_hash=config['api_hash'], workdir=str(SESSIONS_DIR), proxy=config.get('proxy'))
    try:
        await client.start()
        logging.info(f"[{task_name}] –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...")
        async for dialog in client.get_dialogs(): pass
        logging.info(f"[{task_name}] –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        
        success = await _execute_post_logic(task_name, client, config, content_data)
        if success:
            await message.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    finally:
        if client.is_connected: await client.stop()
        await state.clear()

# –ó–ê–ú–ï–ù–ò–¢–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ
async def cb_view_content_pool(callback: CallbackQuery, state: FSMContext):
    task_name = callback.data.split(":")[1]
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    content_pool = config.get("management_config", {}).get("content_pool", [])
    if not content_pool:
        await safe_answer_callback(callback, "–í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –µ—â–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", show_alert=True)
        return

    text = f"<b>üìã –ü–æ—Å—Ç—ã –≤ –∑–∞–¥–∞—á–µ '{task_name}':</b>\n\n"
    buttons = []

    for item in content_pool:
        ctype = "‚ú® –ì–µ–Ω–µ—Ä." if item.get('type') == 'generative' else "üìù –û–±—ã—á."
        schedule_type = item.get('schedule_type')

        schedule_info = ""
        if schedule_type == 'scheduled':
            try:
                dt = datetime.fromisoformat(item.get('run_date', ''))
                schedule_info = f"üóìÔ∏è {dt.strftime('%d.%m %H:%M')}"
            except (ValueError, TypeError):
                schedule_info = "üóìÔ∏è –û—à–∏–±–∫–∞ –¥–∞—Ç—ã"
        elif schedule_type == 'recurring':
            schedule_info = f"üîÑ {item.get('interval_hours', 'N/A')}—á"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π ID –¥–ª—è callback_data
        short_id = item['content_id'][:8]
        button_text = f"{ctype} {schedule_info}"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        max_len = 40
        if len(button_text) > max_len:
            button_text = button_text[:max_len-3] + "..."

        buttons.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"c_vp:{task_name}:{short_id}" # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏ ID
        )])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"channel_manage_content:{task_name}")])

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await safe_answer_callback(callback)

# –ó–ê–ú–ï–ù–ò–¢–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ
async def cb_view_post(callback: CallbackQuery, state: FSMContext):
    _, task_name, short_id = callback.data.split(":")
    config = await read_json_file(TASKS_DIR / f"{task_name}.json")
    content_pool = config.get("management_config", {}).get("content_pool", [])

    # –ò—â–µ–º –ø–æ—Å—Ç –ø–æ –Ω–∞—á–∞–ª—É ID
    item = next((p for p in content_pool if p["content_id"].startswith(short_id)), None)

    if not item:
        await safe_answer_callback(callback, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª —É–¥–∞–ª–µ–Ω).", show_alert=True)
        await cb_view_content_pool(callback, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É
        return

    full_content_id = item['content_id']
    text = f"<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ (ID: {full_content_id[:8]}):</b>\n\n"
    post_text = item.get("text") or item.get("prompt") or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"

    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(post_text) > 3000:
        post_text = post_text[:3000] + "\n\n...(—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)..."

    text += post_text

    buttons = [
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"c_del_p:{task_name}:{short_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"channel_view_content:{task_name}")]
    ]

    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await safe_answer_callback(callback)


# –ó–ê–ú–ï–ù–ò–¢–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ
async def cb_delete_post(callback: CallbackQuery, state: FSMContext):
    _, task_name, short_id = callback.data.split(":")

    async with await get_task_lock(task_name):
        config = await read_json_file(TASKS_DIR / f"{task_name}.json")
        content_pool = config.get("management_config", {}).get("content_pool", [])

        initial_len = len(content_pool)
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç, –Ω–∞—Ö–æ–¥—è –µ–≥–æ –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º—É ID
        content_pool = [item for item in content_pool if not item["content_id"].startswith(short_id)]

        if len(content_pool) < initial_len:
            config["management_config"]["content_pool"] = content_pool
            await write_json_file(TASKS_DIR / f"{task_name}.json", config)
            await safe_answer_callback(callback, "–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω.")
        else:
            await safe_answer_callback(callback, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤
    fake_callback = callback_query_from_message(callback.message, f"channel_view_content:{task_name}")
    await cb_view_content_pool(fake_callback, state)

def callback_query_from_message(message: Message, new_data: str) -> CallbackQuery:
    return CallbackQuery(id=str(uuid.uuid4()), from_user=message.from_user, chat_instance=str(uuid.uuid4()), message=message, data=new_data)
    
# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_handlers(router: Router, bot: Bot):
    global bot_instance, cb_task_edit
    bot_instance = bot
    # –ü–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ç–æ–º—É –º–æ–¥—É–ª—é –≤—ã–∑—ã–≤–∞—Ç—å cb_task_edit –∏–∑ main.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
    try:
        from main import cb_task_edit as main_cb_task_edit
        cb_task_edit = main_cb_task_edit
    except ImportError:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å cb_task_edit –∏–∑ main.py. –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç?")
        cb_task_edit = None

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞)
    router.callback_query.register(cb_manage_channel_tasks, F.data == "manage_channel_tasks", AdminFilter())
    router.callback_query.register(cb_channel_task_add, F.data == "channel_task_add", AdminFilter())

    # FSM: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    router.message.register(process_channel_task_name, ChannelTaskCreation.name, AdminFilter())
    router.message.register(process_channel_task_api_id, ChannelTaskCreation.api_id, AdminFilter())
    router.message.register(process_channel_task_api_hash, ChannelTaskCreation.api_hash, AdminFilter())
    router.message.register(process_channel_task_proxy, ChannelTaskCreation.proxy, AdminFilter())
    router.message.register(process_channel_task_watermark, F.document | (F.text == "-"), ChannelTaskCreation.watermark, AdminFilter())
    
    # FSM: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤)
    async def handle_main_channel_id(message: Message, state: FSMContext): await process_channel_id(message, state, is_main=True)
    async def handle_main_channel_link(message: Message, state: FSMContext): await process_channel_link(message, state, is_main=True)
    async def handle_main_channel_lang(message: Message, state: FSMContext): await process_channel_lang(message, state, is_main=True)
    async def handle_extra_channel_id(message: Message, state: FSMContext): await process_channel_id(message, state, is_main=False)
    async def handle_extra_channel_link(message: Message, state: FSMContext): await process_channel_link(message, state, is_main=False)
    async def handle_extra_channel_lang(message: Message, state: FSMContext): await process_channel_lang(message, state, is_main=False)
    
    router.message.register(handle_main_channel_id, ChannelTaskCreation.get_main_channel_id, AdminFilter())
    router.message.register(handle_main_channel_link, ChannelTaskCreation.get_main_channel_link, AdminFilter())
    router.message.register(handle_main_channel_lang, ChannelTaskCreation.get_main_channel_lang, AdminFilter())
    router.callback_query.register(cb_ask_for_another_channel, F.data.startswith("add_extra_channel:"), ChannelTaskCreation.ask_for_another_channel, AdminFilter())
    router.message.register(handle_extra_channel_id, ChannelTaskCreation.get_extra_channel_id, AdminFilter())
    router.message.register(handle_extra_channel_link, ChannelTaskCreation.get_extra_channel_link, AdminFilter())
    router.message.register(handle_extra_channel_lang, ChannelTaskCreation.get_extra_channel_lang, AdminFilter())

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    router.callback_query.register(cb_manage_content_pool, F.data.startswith("channel_manage_content:"), AdminFilter())

    # FSM: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–±—ã—á–Ω–æ–≥–æ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ)
    router.callback_query.register(cb_add_content, F.data.startswith("channel_add_content:"), AdminFilter())
    router.message.register(process_content_for_pool, ContentPoolManagement.get_content_type, F.content_type.in_({'text', 'photo', 'video'}), AdminFilter())
    router.callback_query.register(cb_confirm_pool_album, F.data.startswith("pool_confirm_album:"), ContentPoolManagement.confirm_album, AdminFilter())
    router.message.register(process_schedule_details, ContentPoolManagement.get_schedule_details_value, AdminFilter())
    
    # FSM: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    router.callback_query.register(cb_add_content_menu, F.data.startswith("channel_add_content_menu:"), AdminFilter())
    router.callback_query.register(cb_add_generative_post, F.data.startswith("channel_add_generative:"), AdminFilter())
    router.message.register(process_generative_prompt, ContentPoolManagement.get_content_prompt, AdminFilter())
    router.callback_query.register(cb_handle_image_choice, F.data.startswith("gen_image_type:"), ContentPoolManagement.ask_for_image_type, AdminFilter())
    router.message.register(process_generative_custom_image, ContentPoolManagement.get_custom_image, F.content_type.in_({'photo', 'video'}), AdminFilter())
    router.callback_query.register(cb_get_schedule_type, F.data.startswith("gen_schedule_type:"), ContentPoolManagement.get_schedule_details_type, AdminFilter())

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–±—ç–∫–∞–º–∏)
    router.callback_query.register(cb_view_content_pool, F.data.startswith("channel_view_content:"), AdminFilter())
    router.callback_query.register(cb_view_post, F.data.startswith("c_vp:"), AdminFilter())
    router.callback_query.register(cb_delete_post, F.data.startswith("c_del_p:"), AdminFilter())

    # –ü–æ—Å—Ç–∏–Ω–≥ "—Å–µ–π—á–∞—Å"
    router.callback_query.register(cb_post_now, F.data.startswith("channel_post_now:"), AdminFilter())
    router.message.register(process_immediate_post_content, ContentPoolManagement.get_immediate_post_content, F.content_type.in_({'text', 'photo', 'video'}), AdminFilter())

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
    router.callback_query.register(cb_edit_translator_menu, F.data.startswith("channel_edit_translator_menu:"), AdminFilter())
    router.callback_query.register(cb_set_translator, F.data.startswith("channel_set_translator:"), AdminFilter())
    router.callback_query.register(cb_edit_text_gen_menu, F.data.startswith("channel_edit_text_gen_menu:"), AdminFilter())
    router.callback_query.register(cb_set_text_gen, F.data.startswith("channel_set_text_gen:"), AdminFilter())
    router.callback_query.register(cb_edit_channels_menu, F.data.startswith("channel_edit_channels:"), AdminFilter())
    router.callback_query.register(cb_delete_channel, F.data.startswith("channel_delete_channel:"), AdminFilter())
    
    # FSM: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞)
    router.callback_query.register(cb_add_new_channel, F.data.startswith("channel_add_new_channel:"), AdminFilter())
    router.message.register(process_new_channel_id, ChannelTaskEditing.get_new_channel_id, AdminFilter())
    router.message.register(process_new_channel_link, ChannelTaskEditing.get_new_channel_link, AdminFilter())
    router.message.register(process_new_channel_lang, ChannelTaskEditing.get_new_channel_lang, AdminFilter())